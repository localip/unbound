"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function _export(e,a){for(var s in a)Object.defineProperty(e,s,{enumerable:!0,get:a[s]})}(exports,{state:()=>s,initialize:()=>initialize,shutdown:()=>shutdown,add:()=>add,addStrings:()=>addStrings,inject:()=>inject});const e=require("../modules/webpack/common"),a=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(require("../i18n")),s={locale:"en-US",messages:{}};function initialize(){e.Locale&&(s.locale=e.Locale.getLocale()??"en-US",e.Locale.on("locale",onChange),add(a.default))}function shutdown(){if(!e.Locale)return;let a=e.Locale._provider._context;for(let n in s.messages)if(s.messages[n])for(let t of Object.keys(s.messages[n]))delete a.defaultMessages[t],delete a.messages[t],delete e.Locale.Messages[t];e.Locale.off("locale",onChange)}function add(e){if("object"!=typeof e||Array.isArray(e))throw Error("Locale strings must be an object with languages and strings.");for(let a in e)addStrings(a,e[a])}function addStrings(e,a){s.locale&&(s.messages[e]??={},Object.assign(s.messages[e],a),inject())}function inject(){if(!s.locale||!e.Locale)return;let a=e.Locale._provider._context;Object.assign(a.messages,s.messages[s.locale]??{}),Object.assign(a.defaultMessages,s.messages["en-US"]??{})}function onChange(a){s.locale=a,e.Locale.loadPromise.then(inject)}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvYXBpL2kxOG4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnQHdlYnBhY2svY29tbW9uJztcclxuaW1wb3J0IGkxOG4gZnJvbSAnQGNsaWVudC9pMThuJztcclxuXHJcbnR5cGUgTG9jYWxlU3RyaW5ncyA9IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIGFueT4+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0YXRlID0ge1xyXG4gICBsb2NhbGU6ICdlbi1VUycsXHJcbiAgIG1lc3NhZ2VzOiB7fVxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcbiAgIGlmICghTG9jYWxlKSByZXR1cm47XHJcblxyXG4gICBzdGF0ZS5sb2NhbGUgPSBMb2NhbGUuZ2V0TG9jYWxlKCkgPz8gJ2VuLVVTJztcclxuICAgTG9jYWxlLm9uKCdsb2NhbGUnLCBvbkNoYW5nZSk7XHJcblxyXG4gICAvLyBBZGQgY29yZSBzdHJpbmdzXHJcbiAgIGFkZChpMThuKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNodXRkb3duKCkge1xyXG4gICBpZiAoIUxvY2FsZSkgcmV0dXJuO1xyXG5cclxuICAgY29uc3QgY29udGV4dCA9IExvY2FsZS5fcHJvdmlkZXIuX2NvbnRleHQ7XHJcblxyXG4gICBmb3IgKGNvbnN0IGxvY2FsZSBpbiBzdGF0ZS5tZXNzYWdlcykge1xyXG4gICAgICBpZiAoIXN0YXRlLm1lc3NhZ2VzW2xvY2FsZV0pIGNvbnRpbnVlO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIE9iamVjdC5rZXlzKHN0YXRlLm1lc3NhZ2VzW2xvY2FsZV0pKSB7XHJcbiAgICAgICAgIGRlbGV0ZSBjb250ZXh0LmRlZmF1bHRNZXNzYWdlc1ttZXNzYWdlXTtcclxuICAgICAgICAgZGVsZXRlIGNvbnRleHQubWVzc2FnZXNbbWVzc2FnZV07XHJcbiAgICAgICAgIGRlbGV0ZSBMb2NhbGUuTWVzc2FnZXNbbWVzc2FnZV07XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgTG9jYWxlLm9mZignbG9jYWxlJywgb25DaGFuZ2UpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkKHN0cmluZ3M6IExvY2FsZVN0cmluZ3MpIHtcclxuICAgaWYgKHR5cGVvZiBzdHJpbmdzICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHN0cmluZ3MpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTG9jYWxlIHN0cmluZ3MgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBsYW5ndWFnZXMgYW5kIHN0cmluZ3MuJyk7XHJcbiAgIH1cclxuXHJcbiAgIGZvciAoY29uc3QgbG9jYWxlIGluIHN0cmluZ3MpIHtcclxuICAgICAgYWRkU3RyaW5ncyhsb2NhbGUsIHN0cmluZ3NbbG9jYWxlXSk7XHJcbiAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRTdHJpbmdzKGxvY2FsZTogc3RyaW5nLCBzdHJpbmdzOiBMb2NhbGVTdHJpbmdzKSB7XHJcbiAgIGlmICghc3RhdGUubG9jYWxlKSByZXR1cm47XHJcblxyXG4gICBzdGF0ZS5tZXNzYWdlc1tsb2NhbGVdID8/PSB7fTtcclxuICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5tZXNzYWdlc1tsb2NhbGVdLCBzdHJpbmdzKTtcclxuXHJcbiAgIGluamVjdCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0KCkge1xyXG4gICBpZiAoIXN0YXRlLmxvY2FsZSB8fCAhTG9jYWxlKSByZXR1cm47XHJcblxyXG4gICBjb25zdCBjb250ZXh0ID0gTG9jYWxlLl9wcm92aWRlci5fY29udGV4dDtcclxuXHJcbiAgIE9iamVjdC5hc3NpZ24oY29udGV4dC5tZXNzYWdlcywgc3RhdGUubWVzc2FnZXNbc3RhdGUubG9jYWxlXSA/PyB7fSk7XHJcbiAgIE9iamVjdC5hc3NpZ24oY29udGV4dC5kZWZhdWx0TWVzc2FnZXMsIHN0YXRlLm1lc3NhZ2VzWydlbi1VUyddID8/IHt9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25DaGFuZ2UobG9jYWxlKSB7XHJcbiAgIHN0YXRlLmxvY2FsZSA9IGxvY2FsZTtcclxuICAgTG9jYWxlLmxvYWRQcm9taXNlLnRoZW4oaW5qZWN0KTtcclxufSJdLCJuYW1lcyI6WyJzdGF0ZSIsImluaXRpYWxpemUiLCJzaHV0ZG93biIsImFkZCIsImFkZFN0cmluZ3MiLCJpbmplY3QiLCJsb2NhbGUiLCJtZXNzYWdlcyIsIkxvY2FsZSIsImdldExvY2FsZSIsIm9uIiwib25DaGFuZ2UiLCJpMThuIiwiY29udGV4dCIsIl9wcm92aWRlciIsIl9jb250ZXh0IiwibWVzc2FnZSIsIk9iamVjdCIsImtleXMiLCJkZWZhdWx0TWVzc2FnZXMiLCJNZXNzYWdlcyIsIm9mZiIsInN0cmluZ3MiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsImFzc2lnbiIsImxvYWRQcm9taXNlIiwidGhlbiJdLCJtYXBwaW5ncyI6IkFBQUEsd0tBS2FBLEtBQUssS0FBTEEsQ0FBSyxDQUtGQyxVQUFVLEtBQVZBLFVBQVUsQ0FVVkMsUUFBUSxLQUFSQSxRQUFRLENBa0JSQyxHQUFHLEtBQUhBLEdBQUcsQ0FVSEMsVUFBVSxLQUFWQSxVQUFVLENBU1ZDLE1BQU0sS0FBTkEsTUFBTSxtQkF6REMsMkJBQWlCLHFGQUN2QixTQUFjLEdBSWxCTCxDQUFLLENBQUcsQ0FDbEJNLE1BQU0sQ0FBRSxPQUFPLENBQ2ZDLFFBQVEsQ0FBRSxFQUFFLENBQ2QsQUFFTSxVQUFTTixVQUFVLEVBQUcsQ0FDckJPLENBQU0sT0FBQSxHQUVYUixDQUFLLENBQUNNLE1BQU0sQ0FBR0UsQ0FBTSxPQUFBLENBQUNDLFNBQVMsRUFBRSxFQUFJLE9BQU8sQ0FDNUNELENBQU0sT0FBQSxDQUFDRSxFQUFFLENBQUMsUUFBUSxDQUFFQyxRQUFRLENBQUMsQ0FHN0JSLEdBQUcsQ0FBQ1MsQ0FBSSxRQUFBLENBQUMsRUFDWCxBQUVNLFNBQVNWLFFBQVEsRUFBRyxDQUN4QixHQUFJLENBQUNNLENBQU0sT0FBQSxDQUFFLE1BQU8sQUFFcEIsS0FBTUssQ0FBTyxDQUFHTCxDQUFNLE9BQUEsQ0FBQ00sU0FBUyxDQUFDQyxRQUFRLEFBQUMsQUFFMUMsS0FBSyxJQUFNVCxDQUFNLElBQUlOLENBQUssQ0FBQ08sUUFBUSxDQUNoQyxHQUFLUCxDQUFLLENBQUNPLFFBQVEsQ0FBQ0QsQ0FBTSxDQUFDLENBRTNCLElBQUssSUFBTVUsQ0FBTyxJQUFJQyxNQUFNLENBQUNDLElBQUksQ0FBQ2xCLENBQUssQ0FBQ08sUUFBUSxDQUFDRCxDQUFNLENBQUMsQ0FBQyxDQUN0RCxPQUFPTyxDQUFPLENBQUNNLGVBQWUsQ0FBQ0gsQ0FBTyxDQUFDLENBQ3ZDLE9BQU9ILENBQU8sQ0FBQ04sUUFBUSxDQUFDUyxDQUFPLENBQUMsQ0FDaEMsT0FBT1IsQ0FBTSxPQUFBLENBQUNZLFFBQVEsQ0FBQ0osQ0FBTyxDQUFDLEFBQ2pDLEFBTnFDLEFBT3hDLEFBRURSLENBQUFBLENBQU0sT0FBQSxDQUFDYSxHQUFHLENBQUMsUUFBUSxDQUFFVixRQUFRLENBQUMsQ0FDaEMsQUFFTSxTQUFTUixHQUFHLENBQUNtQixDQUFzQixDQUFFLENBQ3pDLEdBQUksQUFBbUIsUUFBUSxFQUEzQixPQUFPQSxDQUFPLEVBQWlCQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsQ0FBTyxDQUFDLENBQ3RELE1BQU0sQUFBSUcsS0FBSyxDQUFDLDhEQUE4RCxDQUFDLEFBQUMsQUFDbEYsQUFFRCxLQUFLLElBQU1uQixDQUFNLElBQUlnQixDQUFPLENBQ3pCbEIsVUFBVSxDQUFDRSxDQUFNLENBQUVnQixDQUFPLENBQUNoQixDQUFNLENBQUMsQ0FBQyxBQUNyQyxDQUNILEFBRU0sU0FBU0YsVUFBVSxDQUFDRSxDQUFjLENBQUVnQixDQUFzQixDQUFFLENBQzNEdEIsQ0FBSyxDQUFDTSxNQUFNLEdBRWpCTixDQUFLLENBQUNPLFFBQVEsQ0FBQ0QsQ0FBTSxDQUFDLEdBQUssRUFBRSxDQUM3QlcsTUFBTSxDQUFDUyxNQUFNLENBQUMxQixDQUFLLENBQUNPLFFBQVEsQ0FBQ0QsQ0FBTSxDQUFDLENBSklnQixDQUFzQixDQUloQixDQUU5Q2pCLE1BQU0sRUFBRSxFQUNWLEFBRU0sU0FBU0EsTUFBTSxFQUFHLENBQ3RCLEdBQUksQ0FBQ0wsQ0FBSyxDQUFDTSxNQUFNLEVBQUksQ0FBQ0UsQ0FBTSxPQUFBLENBQUUsTUFBTyxBQUVyQyxLQUFNSyxDQUFPLENBQUdMLENBQU0sT0FBQSxDQUFDTSxTQUFTLENBQUNDLFFBQVEsQUFBQyxBQUUxQ0UsQ0FBQUEsTUFBTSxDQUFDUyxNQUFNLENBQUNiLENBQU8sQ0FBQ04sUUFBUSxDQUFFUCxDQUFLLENBQUNPLFFBQVEsQ0FBQ1AsQ0FBSyxDQUFDTSxNQUFNLENBQUMsRUFBSSxFQUFFLENBQUMsQ0FDbkVXLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDYixDQUFPLENBQUNNLGVBQWUsQ0FBRW5CLENBQUssQ0FBQ08sUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFJLEVBQUUsQ0FBQyxDQUN2RSxBQUVELFNBQVNJLFFBQVEsQ0FBQ0wsQ0FBTSxDQUFFLENBQ3ZCTixDQUFLLENBQUNNLE1BQU0sQ0FBR0EsQ0FBTSxDQUNyQkUsQ0FBTSxPQUFBLENBQUNtQixXQUFXLENBQUNDLElBQUksQ0FBQ3ZCLE1BQU0sQ0FBQyxDQUNqQyJ9