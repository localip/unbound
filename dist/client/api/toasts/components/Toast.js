"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"default",{enumerable:!0,get:()=>k});const a=require("../../../modules/webpack/common"),b=require("../../../components/discord"),c=f(require("../../../structures/component")),d=require("../../../components/index"),e=f(require("react"));function f(a){return a&&a.__esModule?a:{default:a}}const g=a.MarkdownParser?.reactParserFor?.(a.MarkdownParser.defaultRules),{useSpring:h,useTransition:i,animated:j}=a.ReactSpring;class k extends c.default{constructor(a){super(),this.ref=e.default.createRef(),this.state={closing:a.closing?? !1,hovered:!1}}componentDidUpdate(a){a.closing!==this.props.closing&&this.setState({closing:this.props.closing})}componentDidCatch(){this.setState({crashed:!0})}render(){let{icon:c,color:f,title:g,manager:k,content:l,position:m,store:n,id:o,timeout:p,onClose:q,buttons:r,settings:s,onTimeout:t,toastProps:u={}}=this.props;p===1/0&&(p=0),this.state.crashed&&(g="This toast failed to render.",c="CloseCircle",f="var(--info-danger-foreground)",l="The code that sent this toast is most likely broken.",r=null,q=null,p=null);let v={from:{value:0},to:{value:100},config:a=>"value"===a?{duration:p}:{duration:0}},w=~m.indexOf("top"),x=h(v),y={config:{mass:1,tension:185,friction:26},from:{opacity:1,height:0,marginTop:10,transform:`translateY(${w?"-100%":0}) scale(1)`},enter:()=>a=>a({opacity:1,marginTop:10,height:this.ref.current?.getBoundingClientRect().height??0,transform:"translateY(0) scale(1)"}),leave:{opacity:0,height:0,marginTop:0,transform:"translateY(0) scale(0.75)"},onRest:()=>{this.state.closing&&delete n.storage[o]}},z=i(!this.state.closing,y),A=s.get("toasts.bgColor",0),B=s.get("toasts.bgOpacity",.5);return e.default.createElement(e.default.Fragment,null,z((h,i)=>i&&e.default.createElement(j.div,{key:o,className:"unbound-toast-wrapper",style:{opacity:h.opacity,height:h.height,marginTop:h.marginTop},onMouseEnter:()=>{s.get("toasts.resetTimeoutOnHover",!1)?x.value.to(a=>{x.value.start({config:{mass:1,tension:500,friction:50,clamp:!0},from:a,to:0})}):x.value.pause()},onMouseLeave:()=>{s.get("toasts.resetTimeoutOnHover",!1)?x.value.start(v):x.value.resume()}},e.default.createElement(j.div,Object.assign({ref:this.ref,"data-color":f,"data-use-custom":s.get("toasts.useCustomColours",!1),style:{transform:h.transform,"--color":f,"--bg":a.Colors.int2rgba(A,B),"--blur":`${s.get("toasts.blurAmount",7.5)}px`},className:"unbound-toast"},u),e.default.createElement("div",{style:{padding:p>0?"10px 10px 6.5px 10px":10}},e.default.createElement("div",{className:"unbound-toast-header","data-has-content":Boolean(l)},"function"==typeof c&&e.default.createElement(c,{className:"unbound-toast-icon"})||"string"==typeof c&&e.default.createElement(d.Icon,{className:"unbound-toast-icon",name:c}),g&&e.default.createElement(b.FormTitle,{className:"unbound-toast-title",tag:"h3"},"function"==typeof g&&e.default.createElement(g,null)||"string"==typeof g&&this.parse(g)),e.default.createElement(d.Icon,{className:"unbound-toast-close",name:"Close",onClick:()=>{k.close(o),q?.()},onContextMenu:()=>{k.closeAll(),q?.()}})),e.default.createElement(b.Text,{className:"unbound-toast-content"},"function"==typeof l&&e.default.createElement(l,null)||"string"==typeof l&&this.parse(l)),Array.isArray(r)&&r.length&&e.default.createElement("div",{className:"unbound-toast-buttons"},r.map((a,c)=>e.default.createElement(b.Button,{color:b.Button.Colors[a.color?.toUpperCase()??"BRAND_NEW"],look:b.Button.Looks[a.look?.toUpperCase()||"FILLED"],size:b.Button.Sizes[a.size?.toUpperCase()||"MIN"],key:`button-${c}`,className:"unbound-toast-button",onClick:()=>{a.onClick?.(),(a.close?? !0)&&k.close(o)}},a.text)))),p>0&&e.default.createElement("div",{className:"unbound-toast-progress"},e.default.createElement(j.div,{className:"unbound-toast-progress-bar",style:{width:x.value.to(a=>(a>=100&&0!==p&&!this.state.closing&&(this.setState({closing:!0}),t?.()),`${a}%`))}}))))))}parse(a){try{return g(a)}catch{return a}}}
//# sourceMappingURL=data:application/json;base64,