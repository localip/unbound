"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(a,b){for(var c in b)Object.defineProperty(a,c,{enumerable:!0,get:b[c]})}(exports,{addListener:()=>j,bulk:()=>r,common:()=>g,data:()=>h,filters:()=>i,find:()=>l,findByDisplayName:()=>q,findByIndex:()=>m,findByProps:()=>o,findByString:()=>p,findLazy:()=>n,initialize:()=>s,listeners:()=>f,removeListener:()=>k,request:()=>w,shutdown:()=>t});const a=require("../../../common/logger"),b=d(require("../../../common/data/modules")),c=d(require("../../../common/data/splash"));function d(a){return a&&a.__esModule?a:{default:a}}const e=(0,a.createLogger)("Webpack"),f=new Set,g={},h={initialized:!1,global:"webpackChunkdiscord_app",instance:null,push:null,sentry:{blocked:!1,tries:0}},i={byProps:(...a)=>b=>{for(let c=0,d=a.length;c<d;c++)if(void 0===b[a[c]])return!1;return!0},byPrototypes:(...a)=>b=>{for(let c=0,d=a.length;c<d;c++)if(b.prototype?.[a[c]]===void 0)return!1;return!0},byDisplayName:(a,b=!0,c=!1,d=!0)=>e=>c&&e.type?.displayName?e.type.displayName===a|| !d&& ~e.type.displayName.indexOf(a):c&&e.render?.displayName?e.render.displayName===a|| !d&& ~e.render.displayName.indexOf(a):c&&e.displayName?e.displayName===a|| !d&& ~e.displayName.indexOf(a):b?"function"==typeof e&&e.displayName===a:"function"==typeof e.default&&e.default.displayName===a,byString:(...a)=>b=>"function"==typeof b&&b?.toString===Object.toString&&a.every(a=>b.toString?.()?.includes?.(a)),byStoreName:a=>b=>b.getName?.()===a};function j(a){return f.add(a),k.bind(this,a)}function k(a){return f.delete(a)}function l(a,{all:b=!1,cache:c=!0,interop:d=!0}={}){if(!a)throw Error("Webpack searches require a filter to search by.");let f=w(c);if(!f)return;let g=!1,h=[];function i(b,c){try{return a(b,c)}catch(d){return g||(e.warn("Uncaught Exception with filter. This can cause lag spikes & slow startup times. Please handle any possible null cases in your filter.",d.message),g=!0),!1}}for(let j in f.c){let k=f.c[j].exports;if(k&&k!==window)switch(typeof k){case"object":if(i(k,j)){if(!b)return k;h.push(k)}if(k.default&&i(k.default,j)){let l=d?k.default:k;if(!b)return l;h.push(l)}break;case"function":if(!i(k,j))continue;if(!b)return k;h.push(k)}}return b?h:h[0]}function m(a){if(!h.instance.c[a])try{h.instance.r(a)}catch(b){return null}return h.instance.c[a]}function n(a,{all:b=!1,interop:c=!0}={}){let d=l(a,{all:b,interop:c});if(d)return Promise.resolve(d);let e=function(b){try{return a(b)}catch{return!1}},f=[];return new Promise(a=>{let d=d=>{if(e(d)&&f.push(d),d.default&&e(d.default)){let h=c?d.default:d;f.push(h)}f.length&&(a(b?f:f[0]),g())},g=j(d)})}function o(...a){let[b,{bulk:c=!1,wait:d=!1,...e}]=x(a);return c?exports.bulk(...b.map(a=>i.byProps(...a)),{wait:d,...e}):d?n(i.byProps(...b),e):l(i.byProps(...b),e)}function p(...a){let[b,{bulk:c=!1,iterop:d=!0,wait:e=!1,...f}]=x(a);return c?exports.bulk(...b.map(a=>i.byString(...a)),{wait:e,...f}):e?n(i.byString(...b),f):l(i.byString(...b),f)}function q(...a){let[b,{bulk:c=!1,interop:d=!0,deep:e=!1,exact:f=!0,wait:g=!1,...h}]=x(a);return c?c(b.map(i.byDisplayName,d,e,f),{wait:g,...h}):g?n(i.byDisplayName(b[0],d,e,f),h):l(i.byDisplayName(b[0],d,e,f),h)}function r(...a){let[b,{wait:c=!1,...d}]=x(a);if(!b||!b.length)return;let f=!1,g=Array(b.length),h=c?n:l,i=b.map(a=>b=>{try{return a(b)}catch(c){return f||(e.warn("Uncaught Exception with filter. This can cause lag spikes & slow startup times. Please handle any possible null cases in your filter.",c.message),f=!0),!1}}),j=h(a=>{for(let c=0;c<i.length;c++){let d=i[c];"function"==typeof d&&d(a)&&null==g[c]&&(g[c]=a)}return g.filter(String).length===b.length},d);return c?j.then(()=>g):g}async function s(){if(!h.initialized){if(window.__SPLASH__){let a=Function.prototype.call;await new Promise(b=>{Function.prototype.call=function(...c){try{let d=c[3];d?.c&&d.m&&"__webpack_require__"!==d.name&&(h.instance=d,Function.prototype.call=a,b())}catch(f){e.error("Failed to fetch.",f),Function.prototype.call=a}return a.apply(this,c)}})}else await y(),w(),h.push=window[h.global].push,Object.defineProperty(window[h.global],"push",{configurable:!0,get:()=>z,set:a=>h.push=a}),await n(a=>a.popLayer);try{await u()}catch(b){e.error("Failed to initialize common modules.",b.message)}h.initialized=!0}}function t(){h.initialized&&(delete window[h.global].push,Object.defineProperty(window[h.global],"push",{configurable:!0,get:()=>h.push,set(a){delete window[h.global].push,window[h.global].push=a}}))}async function u(){let a=[],d=window.__SPLASH__?c.default:b.default;for(let e in d){let f=b.default[e];if(f.submodule){if(!f.items)continue;let h={};for(let i in f.items){let j=f.items[i],k=v(i,j);k.id=e;let l=k.map;k.map=a=>{let b=l?.(a)??a;return h[i]=b,h},a.push(k)}}else{let m=v(e,f);a.push(m)}}let n=r(...a.map(({filter:a})=>a));a.map(({id:a,map:b},c)=>{let d=(b??(a=>a))(n[c]);g[a]=d})}function v(a,b){if(b.storeName)return{id:a,filter:i.byStoreName(b.storeName),map:b.prop?a=>a[b.prop]:null};if(b.props){if(!b.props.every(a=>Array.isArray(a)))return{id:a,filter(a){let c=i.byProps(...b.props)(a);return(!c||!b.ensure||!!b.ensure(a))&&c},map:b.prop?a=>a[b.prop]:null};{let c=[];return{id:a,filter(a){let d=b.props.some(b=>b.every(b=>void 0!==a[b]));return(!d||!b.ensure||!!b.ensure(a))&&(d&&c.push(a),d)},map:()=>Object.assign({},...c)}}}return b.displayName?{id:a,filter:i.byDisplayName(b.displayName,b.default?? !0),map:b.prop?a=>a[b.prop]:null}:b.filter?{id:a,filter:b.filter,map:b.prop?a=>a[b.prop]:null}:void 0}function w(a=!0){if(a&&h.instance)return h.instance;let b=window[h.global].push([[Symbol()],{},a=>a]);return window[h.global].pop(),b&&(h.instance=b),b}function x(a,b=a=>"object"==typeof a&&!Array.isArray(a)){return[a,b(a[a.length-1])?a.pop():{}]}function y(){return window[h.global]?Promise.resolve():new Promise(a=>{Object.defineProperty(window,h.global,{get:()=>void 0,configurable:!0,set(b){delete window[h.global],window[h.global]=b,a()}})})}function z(a){let b=a[1];if(h.sentry.tries<5&&!h.sentry.blocked&&(h.sentry.tries++,Object.values(b).find(a=>~a.toString().indexOf("BetterDiscord"))))return h.sentry.blocked=!0;for(let c in b){let d=b[c];b[c]=(...a)=>{let b=a[1];if(d.apply(null,a),f?.size)for(let c of f)try{c(b)}catch(g){e.error("Failed to fire listener.",g)}},Object.assign(b[c],d,{toString:d.toString.bind(d),__original:d})}return Reflect.apply(h.push,window[h.global],[a])}
//# sourceMappingURL=data:application/json;base64,