"use strict";var a;Object.defineProperty(exports,"__esModule",{value:!0}),!function(a,b){for(var c in b)Object.defineProperty(a,c,{enumerable:!0,get:b[c]})}(exports,{filters:()=>a,listeners:()=>g,common:()=>h,data:()=>i,addListener:()=>j,removeListener:()=>k,find:()=>l,findByIndex:()=>m,findLazy:()=>n,findByProps:()=>p,findByPrototypes:()=>q,findByKeyword:()=>r,findStore:()=>s,findByStrings:()=>t,findByDisplayName:()=>u,bulk:()=>v,initialize:()=>w,shutdown:()=>x,request:()=>A});const b=require("../../../common/logger"),c=e(require("../../../common/data/modules")),d=e(require("../../../common/data/splash"));function e(a){return a&&a.__esModule?a:{default:a}}const f=(0,b.createLogger)("Webpack"),g=new Set,h={},i={initialized:!1,available:new Promise(()=>{}),cache:{},global:"webpackChunkdiscord_app",instance:null,push:null,sentry:{blocked:!1,tries:0}};function j(a){return g.add(a),k.bind(this,a)}function k(a){return g.delete(a)}function l(...b){let[c,{all:d,cache:e=!0,interop:g=!0,initial:h}]=B(b);if(!c?.length)throw Error("Webpack searches require a filter to search by.");let j=A(!0);if(!j)return;let k=!1,m=h??[],n=a.combine(...c),o=(a,b)=>{try{return n(a,b)}catch(c){return k||(f.warn("Uncaught Exception with filter. This can cause lag spikes & slow startup times. Please handle any possible null cases in your filter.",c.message),k=!0),!1}},p=e?i.cache:j.c;for(let q in p){let r=j.c[q].exports;if(!(!r||r===window|| ~m.indexOf(g&&r.default?r.default:r))){if("object"==typeof r){if(o(r,q)){if(i.cache[q]=r,!d)return r;m.push(r)}if(r.default&&o(r.default,q)){i.cache[q]=r;let s=g?r.default:r;if(!d)return s;m.push(s)}}else{if(!o(r,q))continue;if(i.cache[q]=r,!d)return r;m.push(r)}}}return!e||d||m.length?e&&d?l(n,{all:d,cache:!1,interop:g,initial:m}):d?m:m[0]:l(n,{all:d,cache:!1,interop:g})}function m(a){if(!i.instance.c[a])try{i.instance.r(a)}catch(b){return null}return i.instance.c[a]}function n(...b){let[c,{all:d=!1,interop:e=!0}]=B(b),f=l(...c,{all:d,interop:e});if(f)return Promise.resolve(f);let g=a.combine(...c),h=(a,b)=>{try{return g(a,b)}catch{return!1}},i=[];return new Promise(a=>{let b=b=>{if(h(b)&&i.push(b),b.default&&h(b.default)){let f=e?b.default:b;i.push(f)}i.length&&(a(d?i:i[0]),c())},c=j(b)})}function o(a,b,c){let{bulk:d,wait:e,...f}=b;return b.bulk?v(...a.map(a=>c(...a)),b):e?n(c(...a),f):l(c(...a),f)}function p(...b){let[c,d]=B(b);return o(c,d,a.byProps)}function q(...b){let[c,d]=B(b);return o(c,d,a.byPrototypes)}function r(...a){let[b,{caseSensitive:c=!1,...d}]=B(a);return o(b,d,a=>b=>{let d=[...Object.keys(b),...Object.keys(b.__proto__)];for(let e=0;e<d.length;e++){let f=d[e];if(c){if(~f.indexOf(a))return!0}else{let g=a.toLowerCase();if(~f.toLowerCase().indexOf(g))return!0}}return!1})}function s(...b){let[c,{short:d=!1,...e}]=B(b);return o(c,{short:d,...e},a.byStoreName)}function t(...b){let[c,{interop:d=!0,...e}]=B(b);return o(c,{interop:d,...e},a.byStrings)}function u(...b){let[c,{interop:d=!0,deep:e=!1,exact:f=!0,...g}]=B(b);return o(c,{interop:d,...g},b=>a.byDisplayName(b,d,e,f))}function v(...b){let[c,{wait:d=!1,...e}]=B(b);if(!c||!c.length)return;let g=!1,h=Array(c.length),i=d?n:l,j=c.map(b=>{let d=Array.isArray(b)?a.combine(...c):b;return(a,b)=>{try{return d(a,b)}catch(c){return g||(f.warn("Uncaught Exception with filter. This can cause lag spikes & slow startup times. Please handle any possible null cases in your filter.",c.message),g=!0),!1}}}),k=i((a,b)=>{for(let d=0;d<j.length;d++){let e=j[d];"function"==typeof e&&e(a,b)&&null==h[d]&&(h[d]=a)}return h.filter(String).length===c.length},e);return d?k.then(()=>h):h}async function w(){if(!i.initialized){if(window.__SPLASH__){let a=Function.prototype.call;await new Promise(b=>{Function.prototype.call=function(...c){try{let d=c[3];d?.c&&d.m&&"__webpack_require__"!==d.name&&(i.instance=d,Function.prototype.call=a,b())}catch(e){f.error("Failed to fetch.",e),Function.prototype.call=a}return a.apply(this,c)}})}else await C(),A(),i.push=window[i.global].push,Object.defineProperty(window[i.global],"push",{configurable:!0,get:()=>D,set:a=>i.push=a}),await n(a=>a.popLayer);try{await y()}catch(b){f.error("Failed to initialize common modules.",b.message)}i.initialized=!0,i.available=Promise.resolve()}}function x(){i.initialized&&(delete window[i.global].push,Object.defineProperty(window[i.global],"push",{configurable:!0,get:()=>i.push,set(a){delete window[i.global].push,window[i.global].push=a}}))}async function y(){let a=[],b=window.__SPLASH__?d.default:c.default;for(let e in b){let f=c.default[e];if(f.submodule){if(!f.items)continue;let g={};for(let i in f.items){let j=f.items[i],k=z(i,j);k.id=e;let l=k.map;k.map=a=>{let b=l?.(a)??a;return g[i]=b,g},a.push(k)}}else{let m=z(e,f);a.push(m)}}let n=v(...a.map(({filter:a})=>a));a.map(({id:a,map:b},c)=>{let d=(b??(a=>a))(n[c]);h[a]=d})}function z(b,c){if(c.storeName)return{id:b,filter:a.byStoreName(c.storeName),map:c.prop?a=>a[c.prop]:null};if(c.props){if(!c.props.every(a=>Array.isArray(a)))return{id:b,filter(b){let d=a.byProps(...c.props)(b);return(!d||!c.ensure||!!c.ensure(b))&&d},map:c.prop?a=>a[c.prop]:null};{let d=[];return{id:b,filter(a){let b=c.props.some(b=>b.every(b=>void 0!==a[b]));return(!b||!c.ensure||!!c.ensure(a))&&(b&&d.push(a),b)},map:()=>Object.assign({},...d)}}}return c.displayName?{id:b,filter:a.byDisplayName(c.displayName,c.default?? !0),map:c.prop?a=>a[c.prop]:null}:c.filter?{id:b,filter:c.filter,map:c.prop?a=>a[c.prop]:null}:void 0}function A(a=!0){if(a&&i.instance)return i.instance;let b=window[i.global].push([[Symbol()],{},a=>a]);return window[i.global].pop(),b&&(i.instance=b),b}function B(a,b=a=>"object"==typeof a&&!Array.isArray(a),c={}){return[a,b(a[a.length-1])?a.pop():c]}function C(){return window[i.global]?Promise.resolve():new Promise(a=>{Object.defineProperty(window,i.global,{get:()=>void 0,configurable:!0,set(b){delete window[i.global],window[i.global]=b,a()}})})}function D(a){let b=a[1];if(i.sentry.tries<5&&!i.sentry.blocked&&(i.sentry.tries++,Object.values(b).find(a=>~a.toString().indexOf("BetterDiscord"))))return i.sentry.blocked=!0;for(let c in b){let d=b[c];b[c]=(...a)=>{let b=a[1];if(d.apply(null,a),g?.size)for(let c of g)try{c(b)}catch(e){f.error("Failed to fire listener.",e)}},Object.assign(b[c],d,{toString:d.toString.bind(d),__original:d})}return Reflect.apply(i.push,window[i.global],[a])}!function(a){a.byProps=function(...a){let b=a=>"boolean"==typeof a||Array.isArray(a),[c,d]=B(a,b,!1),e=d&&"boolean"==typeof d,f=!e&&Array.isArray(d);return a=>{if(e&& void 0===a.default)return!1;for(let b=0,g=c.length;b<g;b++){if(f)for(let h=0,i=d.length;h<i;h++)a=a?.[d[h]];if((e?a.default:a)?.[c[b]]===void 0)return!1}return!0}},a.byPrototypes=function(...a){let b=a=>"boolean"==typeof a||Array.isArray(a),[c,d]=B(a,b,!1),e=d&&"boolean"==typeof d,f=!e&&Array.isArray(d);return a=>{if(e&& void 0===a.default)return!1;for(let b=0,g=c.length;b<g;b++){if(f)for(let h=0,i=d.length;h<i;h++)a=a?.[d[h]];if((e?a.default:a)?.prototype?.[c[b]]===void 0)return!1}return!0}},a.byDisplayName=function(a,b=!0,c=!1,d=!0){return e=>c&&e.type?.displayName?e.type.displayName===a|| !d&& ~e.type.displayName.indexOf(a):c&&e.render?.displayName?e.render.displayName===a|| !d&& ~e.render.displayName.indexOf(a):c&&e.displayName?e.displayName===a|| !d&& ~e.displayName.indexOf(a):b?"function"==typeof e&&e.displayName===a:"function"==typeof e.default&&e.default.displayName===a},a.byStrings=function(...a){let[b,c]=B(a,a=>"boolean"==typeof a,!1);return a=>{if(!(a=c?a.default:a)||"function"!=typeof a)return!1;for(let d=0,e=b.length;d<e;d++)if(!~a.toString?.()?.indexOf?.(b[d]))return!1;return!0}},a.byStoreName=function(a,b=!0){return c=>c.getName?.()===(b&&!a.endsWith("Store")?`${a}Store`:a)},a.combine=function(...a){return(b,c)=>{for(let d=0,e=a.length;d<e;d++)if(!a[d](b,c))return!1;return!0}},a.inverse=function(a){return(b,c)=>!a(b,c)},a.traverse=function(a,b){return(c,d)=>{if(Array.isArray(b))for(let e=0,f=b.length;e<f;e++){let g=c[b[e]];if(void 0===g)return!1;c=g}else{let h=c[b];if(void 0===h)return!1;c=h}return a(c,d)}}}(a||(a={}))
//# sourceMappingURL=data:application/json;base64,