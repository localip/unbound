"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function _export(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(exports,{filters:()=>e,listeners:()=>l,common:()=>o,data:()=>a,addListener:()=>addListener,removeListener:()=>removeListener,find:()=>find,findByIndex:()=>findByIndex,findLazy:()=>findLazy,findByProps:()=>findByProps,findByPrototypes:()=>findByPrototypes,findByKeyword:()=>findByKeyword,findStore:()=>findStore,findByStrings:()=>findByStrings,findByDisplayName:()=>findByDisplayName,bulk:()=>bulk,initialize:()=>initialize,shutdown:()=>shutdown,request:()=>request});const t=require("../../../common/logger"),r=_interopRequireDefault(require("../../../common/data/modules")),n=_interopRequireDefault(require("../../../common/data/splash"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}const i=(0,t.createLogger)("Webpack"),l=new Set,o={},a={initialized:!1,available:new Promise(()=>{}),cache:{},global:"webpackChunkdiscord_app",instance:null,push:null,sentry:{blocked:!1,tries:0}};function addListener(e){return l.add(e),removeListener.bind(this,e)}function removeListener(e){return l.delete(e)}function find(...t){let[r,{all:n,cache:l=!0,raw:o=!1,interop:f=!0,initial:u}]=parseOptions(t);if(!r?.length)throw Error("Webpack searches require a filter to search by.");let s=request(!0);if(!s)return;let p=!1,d=u??[],y=e.combine(...r),validate=(e,t)=>{try{return y(e,t)}catch(r){return p||(i.warn("Uncaught Exception with filter. This can cause lag spikes & slow startup times. Please handle any possible null cases in your filter.",r.message),p=!0),!1}},c=l?a.cache:s.c;for(let m in c){let h=s.c[m].exports;if(!(!h||h===window||~d.indexOf(f&&h.default?h.default:h))){if("object"==typeof h){if(validate(h,m)){a.cache[m]=s.c[m];let g=o?s.c[m]:h;if(!n)return g;d.push(g)}if(h.default&&validate(h.default,m)){a.cache[m]=s.c[m];let b=o?s.c[m]:f?h.default:h;if(!n)return b;d.push(b)}}else{if(!validate(h,m))continue;a.cache[m]=s.c[m];let $=o?s.c[m]:h;if(!n)return $;d.push($)}}}return!l||n||d.length?l&&n?find(y,{all:n,raw:o,cache:!1,interop:f,initial:d}):n?d:d[0]:find(y,{all:n,raw:o,cache:!1,interop:f})}function findByIndex(e){if(!a.instance.c[e])try{a.instance.r(e)}catch(t){return null}return a.instance.c[e]}function findLazy(...t){let[r,{all:n=!1,interop:i=!0}]=parseOptions(t),l=find(...r,{all:n,interop:i});if(l)return Promise.resolve(l);let o=e.combine(...r),validate=(e,t)=>{try{return o(e,t)}catch{return!1}},a=[];return new Promise(e=>{let listener=r=>{if(validate(r)&&a.push(r),r.default&&validate(r.default)){let l=i?r.default:r;a.push(l)}a.length&&(e(n?a:a[0]),t())},t=addListener(listener)})}function _find(e,t,r){let{bulk:n,wait:i,...l}=t;return t.bulk?bulk(...e.map(e=>r(...e)),t):i?findLazy(r(...e),l):find(r(...e),l)}function findByProps(...t){let[r,n]=parseOptions(t);return _find(r,n,e.byProps)}function findByPrototypes(...t){let[r,n]=parseOptions(t);return _find(r,n,e.byPrototypes)}function findByKeyword(...e){let[t,{caseSensitive:r=!1,...n}]=parseOptions(e);return _find(t,n,e=>t=>{let n=[...Object.keys(t),...Object.keys(t.__proto__)];for(let i=0;i<n.length;i++){let l=n[i];if(r){if(~l.indexOf(e))return!0}else{let o=e.toLowerCase();if(~l.toLowerCase().indexOf(o))return!0}}return!1})}function findStore(...t){let[r,{short:n=!1,...i}]=parseOptions(t);return _find(r,{short:n,...i},e.byStoreName)}function findByStrings(...t){let[r,{interop:n=!0,...i}]=parseOptions(t);return _find(r,{interop:n,...i},e.byStrings)}function findByDisplayName(...t){let[r,{interop:n=!0,deep:i=!1,exact:l=!0,...o}]=parseOptions(t);return _find(r,{interop:n,...o},t=>e.byDisplayName(t,n,i,l))}function bulk(...t){let[r,{wait:n=!1,...l}]=parseOptions(t);if(!r||!r.length)return;let o=!1,a=Array(r.length),f=r.map(t=>{let n=Array.isArray(t)?e.combine(...r):t;return(e,t)=>{try{return n(e,t)}catch(r){return o||(i.warn("Uncaught Exception with filter. This can cause lag spikes & slow startup times. Please handle any possible null cases in your filter.",r.message),o=!0),!1}}}),u=(n?findLazy:find)((e,t)=>{for(let n=0;n<f.length;n++){let i=f[n];"function"==typeof i&&i(e,t)&&null==a[n]&&(a[n]=e)}return a.filter(String).length===r.length},l);return n?u.then(()=>a):a}async function initialize(){if(!a.initialized){if(window.__SPLASH__){let e=Function.prototype.call;await new Promise(t=>{Function.prototype.call=function(...r){try{let n=r[3];n?.c&&n.m&&"__webpack_require__"!==n.name&&(a.instance=n,Function.prototype.call=e,t())}catch(l){i.error("Failed to fetch.",l),Function.prototype.call=e}return e.apply(this,r)}})}else await waitForGlobal(),request(),a.push=window[a.global].push,Object.defineProperty(window[a.global],"push",{configurable:!0,get:()=>onPush,set:e=>a.push=e}),await findLazy(e=>e.popLayer);try{await initializeModules()}catch(t){i.error("Failed to initialize common modules.",t.message)}a.initialized=!0,a.available=Promise.resolve()}}function shutdown(){a.initialized&&(delete window[a.global].push,Object.defineProperty(window[a.global],"push",{configurable:!0,get:()=>a.push,set(e){delete window[a.global].push,window[a.global].push=e}}))}async function initializeModules(){let e=[],t=window.__SPLASH__?n.default:r.default;for(let i in t){let l=r.default[i];if(l.submodule){if(!l.items)continue;let a={};for(let f in l.items){let u=l.items[f],s=handleCommonModule(f,u);s.id=i;let p=s.map;s.map=e=>{let t=p?.(e)??e;return a[f]=t,a},e.push(s)}}else{let d=handleCommonModule(i,l);e.push(d)}}let y=bulk(...e.map(({filter:e})=>e));e.map(({id:e,map:t},r)=>{let n=(t??(e=>e))(y[r]);o[e]=n})}function handleCommonModule(t,r){if(r.storeName)return{id:t,filter:e.byStoreName(r.storeName),map:r.prop?e=>e[r.prop]:null};if(r.props){if(!r.props.every(e=>Array.isArray(e)))return{id:t,filter(t){let n=e.byProps(...r.props)(t);return(!n||!r.ensure||!!r.ensure(t))&&n},map:r.prop?e=>e[r.prop]:null};{let n=[];return{id:t,filter(e){let t=r.props.some(t=>t.every(t=>void 0!==e[t]));return(!t||!r.ensure||!!r.ensure(e))&&(t&&n.push(e),t)},map:()=>Object.assign({},...n)}}}return r.displayName?{id:t,filter:e.byDisplayName(r.displayName,r.default??!0),map:r.prop?e=>e[r.prop]:null}:r.filter?{id:t,filter:r.filter,map:r.prop?e=>e[r.prop]:null}:void 0}function request(e=!0){if(e&&a.instance)return a.instance;let t=window[a.global].push([[Symbol()],{},e=>e]);return window[a.global].pop(),t&&(a.instance=t),t}function parseOptions(e,t=e=>"object"==typeof e&&!Array.isArray(e),r={}){return[e,t(e[e.length-1])?e.pop():r]}function waitForGlobal(){return window[a.global]?Promise.resolve():new Promise(e=>{Object.defineProperty(window,a.global,{get:()=>void 0,configurable:!0,set(t){delete window[a.global],window[a.global]=t,e()}})})}function onPush(e){let t=e[1];if(a.sentry.tries<5&&!a.sentry.blocked&&(a.sentry.tries++,Object.values(t).find(e=>~e.toString().indexOf("BetterDiscord"))))return a.sentry.blocked=!0;for(let r in t){let n=t[r];t[r]=(...e)=>{let t=e[1];if(n.apply(null,e),l?.size)for(let r of l)try{r(t)}catch(o){i.error("Failed to fire listener.",o)}},Object.assign(t[r],n,{toString:n.toString.bind(n),__original:n})}return Reflect.apply(a.push,window[a.global],[e])}!function(e){e.byProps=function byProps(...e){let filter=e=>"boolean"==typeof e||Array.isArray(e),[t,r]=parseOptions(e,filter,!1),n=r&&"boolean"==typeof r,i=!n&&Array.isArray(r);return e=>{if(n&&void 0===e.default)return!1;for(let l=0,o=t.length;l<o;l++){if(i)for(let a=0,f=r.length;a<f;a++)e=e?.[r[a]];if((n?e.default:e)?.[t[l]]===void 0)return!1}return!0}},e.byPrototypes=function byPrototypes(...e){let filter=e=>"boolean"==typeof e||Array.isArray(e),[t,r]=parseOptions(e,filter,!1),n=r&&"boolean"==typeof r,i=!n&&Array.isArray(r);return e=>{if(n&&void 0===e.default)return!1;for(let l=0,o=t.length;l<o;l++){if(i)for(let a=0,f=r.length;a<f;a++)e=e?.[r[a]];if((n?e.default:e)?.prototype?.[t[l]]===void 0)return!1}return!0}},e.byDisplayName=function byDisplayName(e,t=!0,r=!1,n=!0){return i=>r&&i.type?.displayName?i.type.displayName===e||!n&&~i.type.displayName.indexOf(e):r&&i.render?.displayName?i.render.displayName===e||!n&&~i.render.displayName.indexOf(e):r&&i.displayName?i.displayName===e||!n&&~i.displayName.indexOf(e):t?"function"==typeof i&&i.displayName===e:"function"==typeof i.default&&i.default.displayName===e},e.byStrings=function byStrings(...e){return t=>{if(!t||"function"!=typeof t||(t.__original?.toString??t.toString)!==Function.prototype.toString)return!1;for(let r=0,n=e.length;r<n;r++)if(!~t.toString?.()?.indexOf?.(e[r]))return!1;return!0}},e.byStoreName=function byStoreName(e,t=!0){return r=>r.getName?.()===(t&&!e.endsWith("Store")?`${e}Store`:e)},e.combine=function combine(...e){return(t,r)=>{for(let n=0,i=e.length;n<i;n++)if(!e[n](t,r))return!1;return!0}},e.inverse=function inverse(e){return(t,r)=>!e(t,r)},e.traverse=function traverse(e,t){return(r,n)=>{if(Array.isArray(t))for(let i=0,l=t.length;i<l;i++){let o=r[t[i]];if(void 0===o)return!1;r=o}else{let a=r[t];if(void 0===a)return!1;r=a}return e(r,n)}}}(e||(e={}))
//# sourceMappingURL=data:application/json;base64,