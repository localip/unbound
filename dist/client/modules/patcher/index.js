"use strict";var a;Object.defineProperty(exports,"__esModule",{value:!0}),!function(a,b){for(var c in b)Object.defineProperty(a,c,{enumerable:!0,get:b[c]})}(exports,{Type:()=>a,create:()=>k,before:()=>h,instead:()=>i,after:()=>j,unpatchAll:()=>f,patches:()=>c,default:()=>l});const b=require("../../../common/logger");require("./menu"),function(a){a.Before="before",a.Instead="instead",a.After="after"}(a||(a={}));const c=[],d=(0,b.createLogger)("Patcher");function e(a){if(!a)return[];let b=[];for(let d of c){let e=[...d.patches.before,...d.patches.instead,...d.patches.after];for(let f of e)f.caller===a&&b.push(f)}return b}function f(a){let b=e(a);if(b.length)for(let c of b)c.unpatch()}function g(b,e,f,g,h=a.After,i=!1){if(b&&"string"==typeof b){if(e&&["function","object"].includes(typeof e)){if(f&&"string"==typeof f){if(g&&"function"==typeof g){if(h&&"string"==typeof h&&["after","before","instead"].includes(h)){if(void 0===e[f])throw ReferenceError(`function ${f} does not exist on the second argument (object or function)`)}else throw TypeError('fifth argument "type" must be of type string and any of the three: after, before, instead')}else throw TypeError('fourth argument "callback" must be of type function')}else throw TypeError('third argument "func" must be of type string')}else throw TypeError('second argument "mdl" must be of type function or object')}else throw TypeError('first argument "caller" must be of type string');let j=function(a,b){let e=c.find(c=>c.mdl===a&&c.func===b);return e||function(a,b){var e;let f={mdl:a,func:b,original:a[b],unpatch:()=>{f.mdl[f.func]=f.original,f.patches={before:[],after:[],instead:[]}},patches:{before:[],after:[],instead:[]}},g=(e=f,function(){if(!e?.patches?.before.length&&!e?.patches?.after.length&&!e?.patches?.instead.length&&!c.find(a=>a.mdl===e.mdl&&a.func===e.func))return e.unpatch(),new.target?new e.original(...arguments):e.original.apply(this,arguments);let a,b=arguments,f=e.patches.before;for(let g=0;g<f.length;g++){let h=f[g];if(h)try{let i=h.callback(this,b,e.original.bind(this));Array.isArray(i)&&(b=i),h.once&&h.unpatch()}catch(j){d.error(`Could not fire before patch for ${e.func} of ${h.caller}`,j)}}let k=e.patches.instead;if(k.length)for(let l=0;l<k.length;l++){let m=k[l];if(m)try{let n=m.callback(this,b,e.original.bind(this));void 0!==n&&(a=n),m.once&&m.unpatch()}catch(o){d.error(`Could not fire instead patch for ${e.func} of ${m.caller}`,o)}}else a=new.target?new e.original(...b):e.original.apply(this,b);let p=e.patches.after;for(let q=0;q<p.length;q++){let r=p[q];if(r)try{let s=r.callback(this,b,a,b=>a=b);void 0!==s&&(a=s),r.once&&r.unpatch()}catch(t){d.error(`Could not fire after patch for ${e.func} of ${r.caller}`,t)}}return a});a[b]=g;let h=Object.getOwnPropertyDescriptors(f.original);return delete h.length,Object.defineProperties(a[b],{...h,toString:{value:()=>f.original.toString(),configurable:!0,enumerable:!1},__original:{value:f.original,configurable:!0,enumerable:!1}}),c.push(f),f}(a,b)}(e,f),k={caller:b,once:i,type:h,id:j.patches?.[h]?.length??0,callback:g,unpatch:()=>{let a=j.patches?.[h].findIndex(a=>a.id===k.id);if(~a&&j.patches?.[h].splice(a,1),j.patches?.before.length||j.patches?.after.length||j.patches?.instead.length)return;let b=c.findIndex(a=>a.mdl==e&&a.func==f);b&&(c[b]?.unpatch(),c.splice(b,1))}};return j.patches[h]??=[],j.patches[h].push(k),k.unpatch}function h(b,c,d,e,f=!1){return g(b,c,d,e,a.Before,f)}function i(b,c,d,e,f=!1){return g(b,c,d,e,a.Instead,f)}function j(b,c,d,e,f=!1){return g(b,c,d,e,a.After,f)}function k(a){return{getPatchesByCaller:e,before(b,c,d,e=!1){return h(a,b,c,d,e)},instead(b,c,d,e=!1){return i(a,b,c,d,e)},after(b,c,d,e=!1){return j(a,b,c,d,e)},unpatchAll:()=>f(a)}}const l={create:k,before:h,instead:i,after:j,unpatchAll:f,patches:c}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvbW9kdWxlcy9wYXRjaGVyL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ0Bjb21tb24vbG9nZ2VyJztcclxuXHJcbmltcG9ydCAnLi9tZW51JztcclxuXHJcbnR5cGUgQXJndW1lbnRzPFQgZXh0ZW5kcyBGbj4gPSBUIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIFApID0+IGFueSA/IFAgOiBhbnlbXTtcclxuXHJcbmV4cG9ydCB0eXBlIEJlZm9yZU92ZXJ3cml0ZTxGIGV4dGVuZHMgRm4+ID0gKGNvbnRleHQ/OiBhbnksIGFyZ3M/OiBBcmd1bWVudHM8Rj4sIG9yaWdpbmFsPzogRikgPT4gQXJndW1lbnRzPEY+IHwgdm9pZDtcclxuZXhwb3J0IHR5cGUgSW5zdGVhZE92ZXJ3cml0ZTxGIGV4dGVuZHMgRm4+ID0gKGNvbnRleHQ/OiBhbnksIGFyZ3M/OiBBcmd1bWVudHM8Rj4sIG9yaWdpbmFsPzogRikgPT4gUmV0dXJuVHlwZTxGPiB8IHZvaWQ7XHJcbmV4cG9ydCB0eXBlIEFmdGVyT3ZlcndyaXRlPEYgZXh0ZW5kcyBGbj4gPSAoY29udGV4dD86IGFueSwgYXJncz86IEFyZ3VtZW50czxGPiwgcmVzdWx0PzogUmV0dXJuVHlwZTxGPikgPT4gUmV0dXJuVHlwZTxGPiB8IHZvaWQ7XHJcblxyXG5leHBvcnQgdHlwZSBQcm9wT2Y8TT4gPSB7XHJcbiAgIFtLIGluIGtleW9mIE1dOiBNW0tdIGV4dGVuZHMgRm4gPyBFeHRyYWN0PEssIHN0cmluZz4gOiBuZXZlclxyXG59W2tleW9mIE1dO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYXRjaCB7XHJcbiAgIG1kbDogUmVjb3JkPHN0cmluZywgYW55PiB8IEZ1bmN0aW9uO1xyXG4gICBmdW5jOiBzdHJpbmc7XHJcbiAgIG9yaWdpbmFsOiBGdW5jdGlvbjtcclxuICAgdW5wYXRjaDogKCkgPT4gdm9pZDtcclxuICAgcGF0Y2hlczoge1xyXG4gICAgICBiZWZvcmU6IFBhdGNoZXJbXTtcclxuICAgICAgYWZ0ZXI6IFBhdGNoZXJbXTtcclxuICAgICAgaW5zdGVhZDogUGF0Y2hlcltdO1xyXG4gICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhdGNoZXIge1xyXG4gICBjYWxsZXI6IHN0cmluZztcclxuICAgb25jZTogYm9vbGVhbjtcclxuICAgdHlwZTogVHlwZTtcclxuICAgaWQ6IG51bWJlcjtcclxuICAgY2FsbGJhY2s6IGFueTtcclxuICAgdW5wYXRjaDogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ29uc3RydWN0b3IgPSAobmV3ICgpID0+IGFueSk7XHJcblxyXG5leHBvcnQgZW51bSBUeXBlIHtcclxuICAgQmVmb3JlID0gJ2JlZm9yZScsXHJcbiAgIEluc3RlYWQgPSAnaW5zdGVhZCcsXHJcbiAgIEFmdGVyID0gJ2FmdGVyJyxcclxufVxyXG5cclxuY29uc3QgcGF0Y2hlczogUGF0Y2hbXSA9IFtdO1xyXG5jb25zdCBMb2dnZXIgPSBjcmVhdGVMb2dnZXIoJ1BhdGNoZXInKTtcclxuXHJcbmZ1bmN0aW9uIGdldFBhdGNoZXNCeUNhbGxlcihpZDogc3RyaW5nKSB7XHJcbiAgIGlmICghaWQpIHJldHVybiBbXTtcclxuICAgY29uc3QgX3BhdGNoZXM6IFBhdGNoZXJbXSA9IFtdO1xyXG5cclxuICAgZm9yIChjb25zdCBlbnRyeSBvZiBwYXRjaGVzKSB7XHJcbiAgICAgIGNvbnN0IHN0b3JlID0gW1xyXG4gICAgICAgICAuLi5lbnRyeS5wYXRjaGVzLmJlZm9yZSxcclxuICAgICAgICAgLi4uZW50cnkucGF0Y2hlcy5pbnN0ZWFkLFxyXG4gICAgICAgICAuLi5lbnRyeS5wYXRjaGVzLmFmdGVyXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHBhdGNoIG9mIHN0b3JlKSB7XHJcbiAgICAgICAgIGlmIChwYXRjaC5jYWxsZXIgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIF9wYXRjaGVzLnB1c2gocGF0Y2gpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcmV0dXJuIF9wYXRjaGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1bnBhdGNoQWxsKGNhbGxlcjogc3RyaW5nKTogdm9pZCB7XHJcbiAgIGNvbnN0IHBhdGNoZXMgPSBnZXRQYXRjaGVzQnlDYWxsZXIoY2FsbGVyKTtcclxuICAgaWYgKCFwYXRjaGVzLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgZm9yIChjb25zdCBwYXRjaCBvZiBwYXRjaGVzKSB7XHJcbiAgICAgIHBhdGNoLnVucGF0Y2goKTtcclxuICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBvdmVycmlkZShwYXRjaDogUGF0Y2gpIHtcclxuICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgICAhcGF0Y2g/LnBhdGNoZXM/LmJlZm9yZS5sZW5ndGggJiZcclxuICAgICAgICAgIXBhdGNoPy5wYXRjaGVzPy5hZnRlci5sZW5ndGggJiZcclxuICAgICAgICAgIXBhdGNoPy5wYXRjaGVzPy5pbnN0ZWFkLmxlbmd0aCAmJlxyXG4gICAgICAgICAhcGF0Y2hlcy5maW5kKHAgPT4gcC5tZGwgPT09IHBhdGNoLm1kbCAmJiBwLmZ1bmMgPT09IHBhdGNoLmZ1bmMpXHJcbiAgICAgICkge1xyXG4gICAgICAgICBwYXRjaC51bnBhdGNoKCk7XHJcbiAgICAgICAgIHJldHVybiBuZXcudGFyZ2V0ID8gbmV3IChwYXRjaC5vcmlnaW5hbCBhcyBDb25zdHJ1Y3RvcikoLi4uYXJndW1lbnRzIGFzIGFueSBhcyBbXSkgOiBwYXRjaC5vcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgcmVzO1xyXG4gICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cyBhcyBhbnk7XHJcblxyXG4gICAgICBjb25zdCBiZWZvcmUgPSBwYXRjaC5wYXRjaGVzLmJlZm9yZTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZWZvcmUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBiZWZvcmVbaV07XHJcbiAgICAgICAgIGlmICghaW5zdGFuY2UpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGluc3RhbmNlLmNhbGxiYWNrKHRoaXMsIGFyZ3MsIHBhdGNoLm9yaWdpbmFsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0ZW1wKSkgYXJncyA9IHRlbXA7XHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5vbmNlKSBpbnN0YW5jZS51bnBhdGNoKCk7XHJcbiAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihgQ291bGQgbm90IGZpcmUgYmVmb3JlIHBhdGNoIGZvciAke3BhdGNoLmZ1bmN9IG9mICR7aW5zdGFuY2UuY2FsbGVyfWAsIGVycm9yKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpbnN0ZWFkID0gcGF0Y2gucGF0Y2hlcy5pbnN0ZWFkO1xyXG4gICAgICBpZiAoIWluc3RlYWQubGVuZ3RoKSB7XHJcbiAgICAgICAgIGlmIChuZXcudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHJlcyA9IG5ldyAocGF0Y2gub3JpZ2luYWwgYXMgQ29uc3RydWN0b3IpKC4uLmFyZ3MgYXMgYW55IGFzIFtdKTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzID0gcGF0Y2gub3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0ZWFkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGVhZFtpXTtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICBjb25zdCByZXQgPSBpbnN0YW5jZS5jYWxsYmFjayh0aGlzLCBhcmdzLCBwYXRjaC5vcmlnaW5hbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXQgIT09ICd1bmRlZmluZWQnKSByZXMgPSByZXQ7XHJcbiAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5vbmNlKSBpbnN0YW5jZS51bnBhdGNoKCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgIExvZ2dlci5lcnJvcihgQ291bGQgbm90IGZpcmUgaW5zdGVhZCBwYXRjaCBmb3IgJHtwYXRjaC5mdW5jfSBvZiAke2luc3RhbmNlLmNhbGxlcn1gLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBhZnRlciA9IHBhdGNoLnBhdGNoZXMuYWZ0ZXI7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWZ0ZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBhZnRlcltpXTtcclxuICAgICAgICAgaWYgKCFpbnN0YW5jZSkgY29udGludWU7XHJcblxyXG4gICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXQgPSBpbnN0YW5jZS5jYWxsYmFjayh0aGlzLCBhcmdzLCByZXMsIHJldCA9PiAocmVzID0gcmV0KSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9PSAndW5kZWZpbmVkJykgcmVzID0gcmV0O1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2Uub25jZSkgaW5zdGFuY2UudW5wYXRjaCgpO1xyXG4gICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBMb2dnZXIuZXJyb3IoYENvdWxkIG5vdCBmaXJlIGFmdGVyIHBhdGNoIGZvciAke3BhdGNoLmZ1bmN9IG9mICR7aW5zdGFuY2UuY2FsbGVyfWAsIGVycm9yKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwdXNoKG1kbDogUmVjb3JkPHN0cmluZywgYW55PiB8IEZ1bmN0aW9uLCBmdW5jOiBzdHJpbmcpOiBQYXRjaCB7XHJcbiAgIGNvbnN0IHBhdGNoID0ge1xyXG4gICAgICBtZGwsXHJcbiAgICAgIGZ1bmMsXHJcbiAgICAgIG9yaWdpbmFsOiBtZGxbZnVuY10sXHJcbiAgICAgIHVucGF0Y2g6ICgpID0+IHtcclxuICAgICAgICAgcGF0Y2gubWRsW3BhdGNoLmZ1bmNdID0gcGF0Y2gub3JpZ2luYWw7XHJcbiAgICAgICAgIHBhdGNoLnBhdGNoZXMgPSB7XHJcbiAgICAgICAgICAgIGJlZm9yZTogW10sXHJcbiAgICAgICAgICAgIGFmdGVyOiBbXSxcclxuICAgICAgICAgICAgaW5zdGVhZDogW11cclxuICAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgcGF0Y2hlczoge1xyXG4gICAgICAgICBiZWZvcmU6IFtdLFxyXG4gICAgICAgICBhZnRlcjogW10sXHJcbiAgICAgICAgIGluc3RlYWQ6IFtdXHJcbiAgICAgIH1cclxuICAgfTtcclxuXHJcblxyXG4gICBjb25zdCBwYXRjaGVkID0gb3ZlcnJpZGUocGF0Y2gpO1xyXG4gICBtZGxbZnVuY10gPSBwYXRjaGVkO1xyXG5cclxuICAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhwYXRjaC5vcmlnaW5hbCk7XHJcbiAgIGRlbGV0ZSBkZXNjcmlwdG9ycy5sZW5ndGg7XHJcblxyXG4gICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhtZGxbZnVuY10sIHtcclxuICAgICAgLi4uZGVzY3JpcHRvcnMsXHJcbiAgICAgIHRvU3RyaW5nOiB7XHJcbiAgICAgICAgIHZhbHVlOiAoKSA9PiBwYXRjaC5vcmlnaW5hbC50b1N0cmluZygpLFxyXG4gICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIF9fb3JpZ2luYWw6IHtcclxuICAgICAgICAgdmFsdWU6IHBhdGNoLm9yaWdpbmFsLFxyXG4gICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICAgIH1cclxuICAgfSk7XHJcblxyXG4gICBwYXRjaGVzLnB1c2gocGF0Y2gpO1xyXG4gICByZXR1cm4gcGF0Y2g7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldChtZGw6IFJlY29yZDxzdHJpbmcsIGFueT4gfCBGdW5jdGlvbiwgZnVuYzogc3RyaW5nKSB7XHJcbiAgIGNvbnN0IHBhdGNoID0gcGF0Y2hlcy5maW5kKHAgPT4gcC5tZGwgPT09IG1kbCAmJiBwLmZ1bmMgPT09IGZ1bmMpO1xyXG4gICBpZiAocGF0Y2gpIHJldHVybiBwYXRjaDtcclxuXHJcbiAgIHJldHVybiBwdXNoKG1kbCwgZnVuYyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhdGNoPEYgZXh0ZW5kcyBGbj4oY2FsbGVyOiBzdHJpbmcsIG1kbDogUmVjb3JkPHN0cmluZywgYW55PiB8IEZ1bmN0aW9uLCBmdW5jOiBzdHJpbmcsIGNhbGxiYWNrOiBCZWZvcmVPdmVyd3JpdGU8Rj4gfCBJbnN0ZWFkT3ZlcndyaXRlPEY+IHwgQWZ0ZXJPdmVyd3JpdGU8Rj4sIHR5cGUgPSBUeXBlLkFmdGVyLCBvbmNlID0gZmFsc2UpOiAoKSA9PiB2b2lkIHtcclxuICAgaWYgKCFjYWxsZXIgfHwgdHlwZW9mIGNhbGxlciAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlyc3QgYXJndW1lbnQgXCJjYWxsZXJcIiBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJyk7XHJcbiAgIH0gZWxzZSBpZiAoIW1kbCB8fCAhWydmdW5jdGlvbicsICdvYmplY3QnXS5pbmNsdWRlcyh0eXBlb2YgbWRsKSkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZWNvbmQgYXJndW1lbnQgXCJtZGxcIiBtdXN0IGJlIG9mIHR5cGUgZnVuY3Rpb24gb3Igb2JqZWN0Jyk7XHJcbiAgIH0gZWxzZSBpZiAoIWZ1bmMgfHwgdHlwZW9mIGZ1bmMgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXJkIGFyZ3VtZW50IFwiZnVuY1wiIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcnKTtcclxuICAgfSBlbHNlIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZvdXJ0aCBhcmd1bWVudCBcImNhbGxiYWNrXCIgbXVzdCBiZSBvZiB0eXBlIGZ1bmN0aW9uJyk7XHJcbiAgIH0gZWxzZSBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnIHx8ICFbJ2FmdGVyJywgJ2JlZm9yZScsICdpbnN0ZWFkJ10uaW5jbHVkZXModHlwZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlmdGggYXJndW1lbnQgXCJ0eXBlXCIgbXVzdCBiZSBvZiB0eXBlIHN0cmluZyBhbmQgYW55IG9mIHRoZSB0aHJlZTogYWZ0ZXIsIGJlZm9yZSwgaW5zdGVhZCcpO1xyXG4gICB9IGVsc2UgaWYgKHR5cGVvZiBtZGxbZnVuY10gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgZnVuY3Rpb24gJHtmdW5jfSBkb2VzIG5vdCBleGlzdCBvbiB0aGUgc2Vjb25kIGFyZ3VtZW50IChvYmplY3Qgb3IgZnVuY3Rpb24pYCk7XHJcbiAgIH1cclxuXHJcbiAgIGNvbnN0IGN1cnJlbnQgPSBnZXQobWRsLCBmdW5jKTtcclxuXHJcbiAgIGNvbnN0IHBhdGNoID0ge1xyXG4gICAgICBjYWxsZXIsXHJcbiAgICAgIG9uY2UsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIGlkOiBjdXJyZW50LnBhdGNoZXM/Llt0eXBlXT8ubGVuZ3RoID8/IDAsXHJcbiAgICAgIGNhbGxiYWNrLFxyXG4gICAgICB1bnBhdGNoOiAoKSA9PiB7XHJcbiAgICAgICAgIC8vIFJlbW92ZSB0aGUgb3JpZ2luYWwgcGF0Y2ggdGhpcyBjYWxsYmFjayB3YXMgZnJvbVxyXG4gICAgICAgICBjb25zdCBpbmRpdmlkdWFsID0gY3VycmVudC5wYXRjaGVzPy5bdHlwZV0uZmluZEluZGV4KHAgPT4gcC5pZCA9PT0gcGF0Y2guaWQpO1xyXG4gICAgICAgICBpZiAofmluZGl2aWR1YWwpIGN1cnJlbnQucGF0Y2hlcz8uW3R5cGVdLnNwbGljZShpbmRpdmlkdWFsLCAxKTtcclxuXHJcbiAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgY3VycmVudC5wYXRjaGVzPy5iZWZvcmUubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgIGN1cnJlbnQucGF0Y2hlcz8uYWZ0ZXIubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgIGN1cnJlbnQucGF0Y2hlcz8uaW5zdGVhZC5sZW5ndGhcclxuICAgICAgICAgKSByZXR1cm47XHJcblxyXG4gICAgICAgICAvLyBJZiBubyBvdGhlciBwYXRjaGVzIG9uIHRoZSBtb2R1bGUgYXJlIHJlbWFpbmluZywgY29tcGxldGVseSByZW1vdmUgYWxsIHBhdGNoZXNcclxuICAgICAgICAgLy8gYW5kIHJlLWFzc2lnbiB0aGUgb3JpZ2luYWwgbW9kdWxlIHRvIGl0cyBvcmlnaW5hbCBwbGFjZS5cclxuICAgICAgICAgY29uc3QgbW9kdWxlID0gcGF0Y2hlcy5maW5kSW5kZXgocCA9PiBwLm1kbCA9PSBtZGwgJiYgcC5mdW5jID09IGZ1bmMpO1xyXG5cclxuICAgICAgICAgaWYgKCFtb2R1bGUpIHJldHVybjtcclxuICAgICAgICAgcGF0Y2hlc1ttb2R1bGVdPy51bnBhdGNoKCk7XHJcbiAgICAgICAgIHBhdGNoZXMuc3BsaWNlKG1vZHVsZSwgMSk7XHJcbiAgICAgIH1cclxuICAgfTtcclxuXHJcbiAgIGN1cnJlbnQucGF0Y2hlc1t0eXBlXSA/Pz0gW107XHJcbiAgIGN1cnJlbnQucGF0Y2hlc1t0eXBlXS5wdXNoKHBhdGNoKTtcclxuXHJcbiAgIHJldHVybiBwYXRjaC51bnBhdGNoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBiZWZvcmU8XHJcbiAgIE0gZXh0ZW5kcyBSZWNvcmQ8UCwgRm4+LFxyXG4gICBQIGV4dGVuZHMgUHJvcE9mPE0+XHJcbj4oY2FsbGVyOiBzdHJpbmcsIG1kbDogTSwgZnVuYzogUCwgY2FsbGJhY2s6IEJlZm9yZU92ZXJ3cml0ZTxNW1BdPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKTogKCkgPT4gdm9pZCB7XHJcbiAgIHJldHVybiBwYXRjaChjYWxsZXIsIG1kbCwgZnVuYywgY2FsbGJhY2ssIFR5cGUuQmVmb3JlLCBvbmNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5zdGVhZDxcclxuICAgTSBleHRlbmRzIFJlY29yZDxQLCBGbj4sXHJcbiAgIFAgZXh0ZW5kcyBQcm9wT2Y8TT5cclxuPihjYWxsZXI6IHN0cmluZywgbWRsOiBNLCBmdW5jOiBQLCBjYWxsYmFjazogSW5zdGVhZE92ZXJ3cml0ZTxNW1BdPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKTogKCkgPT4gdm9pZCB7XHJcbiAgIHJldHVybiBwYXRjaChjYWxsZXIsIG1kbCwgZnVuYywgY2FsbGJhY2ssIFR5cGUuSW5zdGVhZCwgb25jZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFmdGVyPFxyXG4gICBNIGV4dGVuZHMgUmVjb3JkPFAsIEZuPixcclxuICAgUCBleHRlbmRzIFByb3BPZjxNPlxyXG4+KGNhbGxlcjogc3RyaW5nLCBtZGw6IE0sIGZ1bmM6IFAsIGNhbGxiYWNrOiBBZnRlck92ZXJ3cml0ZTxNW1BdPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKTogKCkgPT4gdm9pZCB7XHJcbiAgIHJldHVybiBwYXRjaChjYWxsZXIsIG1kbCwgZnVuYywgY2FsbGJhY2ssIFR5cGUuQWZ0ZXIsIG9uY2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGUobmFtZTogc3RyaW5nKSB7XHJcbiAgIHJldHVybiB7XHJcbiAgICAgIGdldFBhdGNoZXNCeUNhbGxlcixcclxuICAgICAgYmVmb3JlPFxyXG4gICAgICAgICBNIGV4dGVuZHMgUmVjb3JkPFAsIEZuPixcclxuICAgICAgICAgUCBleHRlbmRzIFByb3BPZjxNPlxyXG4gICAgICA+KG1kbDogTSwgZnVuYzogUCwgY2FsbGJhY2s6IEJlZm9yZU92ZXJ3cml0ZTxNW1BdPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgIHJldHVybiBiZWZvcmUobmFtZSwgbWRsLCBmdW5jLCBjYWxsYmFjaywgb25jZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGluc3RlYWQ8XHJcbiAgICAgICAgIE0gZXh0ZW5kcyBSZWNvcmQ8UCwgRm4+LFxyXG4gICAgICAgICBQIGV4dGVuZHMgUHJvcE9mPE0+XHJcbiAgICAgID4obWRsOiBNLCBmdW5jOiBQLCBjYWxsYmFjazogSW5zdGVhZE92ZXJ3cml0ZTxNW1BdPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgIHJldHVybiBpbnN0ZWFkKG5hbWUsIG1kbCwgZnVuYywgY2FsbGJhY2ssIG9uY2UpO1xyXG4gICAgICB9LFxyXG4gICAgICBhZnRlcjxcclxuICAgICAgICAgTSBleHRlbmRzIFJlY29yZDxQLCBGbj4sXHJcbiAgICAgICAgIFAgZXh0ZW5kcyBQcm9wT2Y8TT5cclxuICAgICAgPihtZGw6IE0sIGZ1bmM6IFAsIGNhbGxiYWNrOiBBZnRlck92ZXJ3cml0ZTxNW1BdPiwgb25jZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgIHJldHVybiBhZnRlcihuYW1lLCBtZGwsIGZ1bmMsIGNhbGxiYWNrLCBvbmNlKTtcclxuICAgICAgfSxcclxuICAgICAgdW5wYXRjaEFsbDogKCkgPT4gdW5wYXRjaEFsbChuYW1lKSxcclxuICAgfTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgY3JlYXRlLFxyXG4gICBiZWZvcmUsXHJcbiAgIGluc3RlYWQsXHJcbiAgIGFmdGVyLFxyXG4gICB1bnBhdGNoQWxsLFxyXG4gICBwYXRjaGVzXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgIGNyZWF0ZSxcclxuICAgYmVmb3JlLFxyXG4gICBpbnN0ZWFkLFxyXG4gICBhZnRlcixcclxuICAgdW5wYXRjaEFsbCxcclxuICAgcGF0Y2hlc1xyXG59O1xyXG4iXSwibmFtZXMiOlsiY3JlYXRlIiwiYmVmb3JlIiwiaW5zdGVhZCIsImFmdGVyIiwidW5wYXRjaEFsbCIsInBhdGNoZXMiLCJUeXBlIiwiQmVmb3JlIiwiSW5zdGVhZCIsIkFmdGVyIiwiTG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiZ2V0UGF0Y2hlc0J5Q2FsbGVyIiwiaWQiLCJfcGF0Y2hlcyIsImVudHJ5Iiwic3RvcmUiLCJwYXRjaCIsImNhbGxlciIsInB1c2giLCJsZW5ndGgiLCJ1bnBhdGNoIiwibWRsIiwiZnVuYyIsImNhbGxiYWNrIiwidHlwZSIsIm9uY2UiLCJpbmNsdWRlcyIsIlJlZmVyZW5jZUVycm9yIiwiVHlwZUVycm9yIiwiY3VycmVudCIsImdldCIsImZpbmQiLCJwIiwib3JpZ2luYWwiLCJwYXRjaGVkIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJyZXMiLCJhcmdzIiwiaSIsImluc3RhbmNlIiwidGVtcCIsImJpbmQiLCJBcnJheSIsImlzQXJyYXkiLCJlcnJvciIsInJldCIsImRlc2NyaXB0b3JzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJ0b1N0cmluZyIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIl9fb3JpZ2luYWwiLCJpbmRpdmlkdWFsIiwiZmluZElu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