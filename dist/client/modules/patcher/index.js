"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function _export(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}(exports,{Type:()=>e,create:()=>create,before:()=>before,instead:()=>instead,after:()=>after,unpatchAll:()=>unpatchAll,patches:()=>n,default:()=>a});const t=require("../../../common/logger");require("./menu"),function(e){e.Before="before",e.Instead="instead",e.After="after"}(e||(e={}));const n=[],r=(0,t.createLogger)("Patcher");function getPatchesByCaller(e){if(!e)return[];let t=[];for(let r of n){let a=[...r.patches.before,...r.patches.instead,...r.patches.after];for(let l of a)l.caller===e&&t.push(l)}return t}function unpatchAll(e){let t=getPatchesByCaller(e);if(t.length)for(let n of t)n.unpatch()}function patch(t,a,l,c,i=e.After,o=!1){if(t&&"string"==typeof t){if(a&&["function","object"].includes(typeof a)){if(l&&"string"==typeof l){if(c&&"function"==typeof c){if(i&&"string"==typeof i&&["after","before","instead"].includes(i)){if(void 0===a[l])throw ReferenceError(`function ${l} does not exist on the second argument (object or function)`)}else throw TypeError('fifth argument "type" must be of type string and any of the three: after, before, instead')}else throw TypeError('fourth argument "callback" must be of type function')}else throw TypeError('third argument "func" must be of type string')}else throw TypeError('second argument "mdl" must be of type function or object')}else throw TypeError('first argument "caller" must be of type string');let f=function get(e,t){let a=n.find(n=>n.mdl===e&&n.func===t);return a||function push(e,t){var a;let l={mdl:e,func:t,original:e[t],unpatch(){l.mdl[l.func]=l.original,l.patches={before:[],after:[],instead:[]}},patches:{before:[],after:[],instead:[]}},c=(a=l,function(){if(!a?.patches?.before.length&&!a?.patches?.after.length&&!a?.patches?.instead.length&&!n.find(e=>e.mdl===a.mdl&&e.func===a.func))return a.unpatch(),new.target?new a.original(...arguments):a.original.apply(this,arguments);let e,t=arguments,l=a.patches.before;for(let c=0;c<l.length;c++){let i=l[c];if(i)try{let o=i.callback(this,t,a.original.bind(this));Array.isArray(o)&&(t=o),i.once&&i.unpatch()}catch(f){r.error(`Could not fire before patch for ${a.func} of ${i.caller}`,f)}}let h=a.patches.instead;if(h.length)for(let s=0;s<h.length;s++){let u=h[s];if(u)try{let p=u.callback(this,t,a.original.bind(this));void 0!==p&&(e=p),u.once&&u.unpatch()}catch(d){r.error(`Could not fire instead patch for ${a.func} of ${u.caller}`,d)}}else e=new.target?new a.original(...t):a.original.apply(this,t);let g=a.patches.after;for(let b=0;b<g.length;b++){let y=g[b];if(y)try{let $=y.callback(this,t,e,t=>e=t);void 0!==$&&(e=$),y.once&&y.unpatch()}catch(w){r.error(`Could not fire after patch for ${a.func} of ${y.caller}`,w)}}return e});e[t]=c;let i=Object.getOwnPropertyDescriptors(l.original);return delete i.length,Object.defineProperties(e[t],{...i,toString:{value:()=>l.original.toString(),configurable:!0,enumerable:!1},__original:{value:l.original,configurable:!0,enumerable:!1}}),n.push(l),l}(e,t)}(a,l),h={caller:t,once:o,type:i,id:f.patches?.[i]?.length??0,callback:c,unpatch(){let e=f.patches?.[i].findIndex(e=>e.id===h.id);if(~e&&f.patches?.[i].splice(e,1),f.patches?.before.length||f.patches?.after.length||f.patches?.instead.length)return;let t=n.findIndex(e=>e.mdl==a&&e.func==l);t&&(n[t]?.unpatch(),n.splice(t,1))}};return f.patches[i]??=[],f.patches[i].push(h),h.unpatch}function before(t,n,r,a,l=!1){return patch(t,n,r,a,e.Before,l)}function instead(t,n,r,a,l=!1){return patch(t,n,r,a,e.Instead,l)}function after(t,n,r,a,l=!1){return patch(t,n,r,a,e.After,l)}function create(e){return{getPatchesByCaller,before:(t,n,r,a=!1)=>before(e,t,n,r,a),instead:(t,n,r,a=!1)=>instead(e,t,n,r,a),after:(t,n,r,a=!1)=>after(e,t,n,r,a),unpatchAll:()=>unpatchAll(e)}}const a={create,before,instead,after,unpatchAll,patches:n}
//# sourceMappingURL=data:application/json;base64,