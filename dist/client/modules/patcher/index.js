"use strict";var a;Object.defineProperty(exports,"__esModule",{value:!0}),!function(a,b){for(var c in b)Object.defineProperty(a,c,{enumerable:!0,get:b[c]})}(exports,{Type:()=>a,create:()=>i,before:()=>f,instead:()=>g,after:()=>h,unpatchAll:()=>d,patches:()=>b,default:()=>j}),function(a){a.Before="before",a.Instead="instead",a.After="after"}(a||(a={}));const b=[];function c(a){if(!a)return[];let c=[];for(let d of b){let e=[...d.patches.before,...d.patches.instead,...d.patches.after];for(let f of e)f.caller===a&&c.push(f)}return c}function d(a){let b=c(a);if(b.length)for(let d of b)d.unpatch()}function e(c,d,e,f,g=a.After,h=!1){if(c&&"string"==typeof c){if(d&&["function","object"].includes(typeof d)){if(e&&"string"==typeof e){if(f&&"function"==typeof f){if(g&&"string"==typeof g&&["after","before","instead"].includes(g)){if(void 0===d[e])throw ReferenceError(`function ${e} does not exist on the second argument (object or function)`)}else throw TypeError('fifth argument "type" must be of type string and any of the three: after, before, instead')}else throw TypeError('fourth argument "callback" must be of type function')}else throw TypeError('third argument "func" must be of type string')}else throw TypeError('second argument "mdl" must be of type function or object')}else throw TypeError('first argument "caller" must be of type string');let i=function(c,d,e=a.After){let f=b.find(a=>a.mdl===c&&a.func===d);return f||function(c,d,e=a.After){var f;let g={mdl:c,func:d,id:b?.[e]?.length??0,original:c[d],unpatch(){g.mdl[g.func]=g.original,g.patches={before:[],after:[],instead:[]}},patches:{before:[],after:[],instead:[]}};c[d]=(f=g,function(){if(!f?.patches?.before.length&&!f?.patches?.after.length&&!f?.patches?.instead.length&&!b.find(a=>a.mdl===f.mdl&&a.func===f.func))return f.unpatch(),new.target?new f.original(...arguments):f.original.apply(this,arguments);let a,c=arguments,d=f.patches.before;for(let e=0;e<d.length;e++){let g=d[e];if(g)try{let h=g.callback(this,c,f.original.bind(this));Array.isArray(h)&&(c=h),g.once&&g.unpatch()}catch(i){console.error(`Could not fire before patch for ${f.func} of ${g.caller}`),console.error(i)}}let j=f.patches.instead;if(j.length)for(let k=0;k<j.length;k++){let l=j[k];if(l)try{let m=l.callback(this,c,f.original.bind(this));void 0!==m&&(a=m),l.once&&l.unpatch()}catch(n){console.error(`Could not fire instead patch for ${f.func} of ${l.caller}`),console.error(n)}}else a=new.target?new f.original(...c):f.original.apply(this,c);let o=f.patches.after;for(let p=0;p<o.length;p++){let q=o[p];if(q)try{let r=q.callback(this,c,a,b=>a=b);void 0!==r&&(a=r),q.once&&q.unpatch()}catch(s){console.error(`Could not fire after patch for ${f.func} of ${q.caller}`),console.error(s)}}return a});let h=Object.getOwnPropertyDescriptors(g.original);return delete h.length,Object.defineProperties(c[d],{...h,toString:{value:()=>g.original.toString(),configurable:!0,enumerable:!1},__original:{value:g.original,configurable:!0,enumerable:!1}}),b.push(g),g}(c,d,e)}(d,e,g),j={caller:c,once:h,type:g,id:i.patches?.[g]?.length??0,callback:f,unpatch(){let a=i.patches?.[g].findIndex(a=>a.id===j.id);if(~a&&i.patches?.[g].splice(a,1),i.patches?.before.length||i.patches?.after.length||i.patches?.instead.length)return;let c=b.findIndex(a=>a.mdl==d&&a.func==e);c&&(b[c]?.unpatch(),b.splice(c,1))}};return i.patches[g]??=[],i.patches[g].push(j),j.unpatch}function f(b,c,d,f,g=!1){return e(b,c,d,f,a.Before,g)}function g(b,c,d,f,g=!1){return e(b,c,d,f,a.Instead,g)}function h(b,c,d,f,g=!1){return e(b,c,d,f,a.After,g)}function i(a){return{getPatchesByCaller:c,before:(b,c,d)=>f(a,b,c,d),instead:(b,c,d)=>g(a,b,c,d),after:(b,c,d)=>h(a,b,c,d),unpatchAll:()=>d(a)}}const j={create:i,before:f,instead:g,after:h,unpatchAll:d,patches:b}
//# sourceMappingURL=data:application/json;base64,