"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(a,b){for(var c in b)Object.defineProperty(a,c,{enumerable:!0,get:b[c]})}(exports,{after:()=>g,before:()=>e,create:()=>h,default:()=>j,instead:()=>f,patches:()=>a,unpatchAll:()=>c}),function(i){i.Before="before",i.Instead="instead",i.After="after"}(i||(i={}));const a=[];function b(b){if(!b)return[];let c=[];for(let d of a){let e=[...d.patches.before,...d.patches.instead,...d.patches.after];for(let f of e)f.caller===b&&c.push(f)}return c}function c(a){let c=b(a);if(c.length)for(let d of c)d.unpatch()}function d(b,c,d,e,f=i.After,g=!1){if(b&&"string"==typeof b){if(c&&["function","object"].includes(typeof c)){if(d&&"string"==typeof d){if(e&&"function"==typeof e){if(f&&"string"==typeof f&&["after","before","instead"].includes(f)){if(void 0===c[d])throw ReferenceError(`function ${d} does not exist on the second argument (object or function)`)}else throw TypeError('fifth argument "type" must be of type string and any of the three: after, before, instead')}else throw TypeError('fourth argument "callback" must be of type function')}else throw TypeError('third argument "func" must be of type string')}else throw TypeError('second argument "mdl" must be of type function or object')}else throw TypeError('first argument "caller" must be of type string');let h=function(b,c,d=i.After){let e=a.find(a=>a.mdl===b&&a.func===c);return e||function(b,c,d=i.After){var e;let f={mdl:b,func:c,id:a?.[d]?.length??0,original:b[c],unpatch(){f.mdl[f.func]=f.original,f.patches={before:[],after:[],instead:[]}},patches:{before:[],after:[],instead:[]}};b[c]=(e=f,function(){if(!e?.patches?.before.length&&!e?.patches?.after.length&&!e?.patches?.instead.length&&!a.find(a=>a.mdl===e.mdl&&a.func===e.func))return e.unpatch(),new.target?new e.original(...arguments):e.original.apply(this,arguments);let b,c=arguments,d=e.patches.before;for(let f=0;f<d.length;f++){let g=d[f];if(g)try{let h=g.callback(this,c,e.original.bind(this));Array.isArray(h)&&(c=h),g.once&&g.unpatch()}catch(i){console.error(`Could not fire before patch for ${e.func} of ${g.caller}`),console.error(i)}}let j=e.patches.instead;if(j.length)for(let k=0;k<j.length;k++){let l=j[k];if(l)try{let m=l.callback(this,c,e.original.bind(this));void 0!==m&&(b=m),l.once&&l.unpatch()}catch(n){console.error(`Could not fire instead patch for ${e.func} of ${l.caller}`),console.error(n)}}else b=new.target?new e.original(...c):e.original.apply(this,c);let o=e.patches.after;for(let p=0;p<o.length;p++){let q=o[p];if(q)try{let r=q.callback(this,c,b,a=>b=a);void 0!==r&&(b=r),q.once&&q.unpatch()}catch(s){console.error(`Could not fire after patch for ${e.func} of ${q.caller}`),console.error(s)}}return b});let g=Object.getOwnPropertyDescriptors(f.original);return delete g.length,Object.defineProperties(b[c],{...g,toString:{value:()=>f.original.toString(),configurable:!0,enumerable:!1},__original:{value:f.original,configurable:!0,enumerable:!1}}),a.push(f),f}(b,c,d)}(c,d,f),j={caller:b,once:g,type:f,id:h.patches?.[f]?.length??0,callback:e,unpatch(){let b=h.patches?.[f].findIndex(a=>a.id===j.id);if(~b&&h.patches?.[f].splice(b,1),h.patches?.before.length||h.patches?.after.length||h.patches?.instead.length)return;let e=a.findIndex(a=>a.mdl==c&&a.func==d);e&&(a[e]?.unpatch(),a.splice(e,1))}};return h.patches[f]??=[],h.patches[f].push(j),j.unpatch}function e(a,b,c,e,f=!1){return d(a,b,c,e,i.Before,f)}function f(a,b,c,e,f=!1){return d(a,b,c,e,i.Instead,f)}function g(a,b,c,e,f=!1){return d(a,b,c,e,i.After,f)}function h(a){return{getPatchesByCaller:b,before:(b,c,d)=>e(a,b,c,d),instead:(b,c,d)=>f(a,b,c,d),after:(b,c,d)=>g(a,b,c,d),unpatchAll:()=>c(a)}}var i,j={create:h,before:e,instead:f,after:g,unpatchAll:c,patches:a}
//# sourceMappingURL=data:application/json;base64,