"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function _export(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(exports,{patches:()=>l,before:()=>before,after:()=>after,instead:()=>instead,create:()=>create,unpatchAll:()=>unpatchAll,default:()=>i});const e=require("../../../common/logger"),t=require("../../../common/utilities/index"),r=function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=_getRequireWildcardCache(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var i=a?Object.getOwnPropertyDescriptor(e,l):null;i&&(i.get||i.set)?Object.defineProperty(n,l,i):n[l]=e[l]}return n.default=e,r&&r.set(e,n),n}(require("@webpack")),n=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(require("./index"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(_getRequireWildcardCache=function(e){return e?r:t})(e)}const a=(0,e.createLogger)("Patcher","Menu"),l={};function before(e,t,r){validateArguments(e,t,r),push("before",e,t,r)}function after(e,t,r){validateArguments(e,t,r),push("after",e,t,r)}function instead(e,t,r){validateArguments(e,t,r),push("instead",e,t,r)}function create(e){return{before:(t,r)=>before(e,t,r),after:(t,r)=>after(e,t,r),instead:(t,r)=>instead(e,t,r),unpatchAll:()=>unpatchAll(e)}}function unpatchAll(e){for(let t in l){let r=l[t];l[t]=r.filter(t=>t.caller!==e)}return n.default.unpatchAll(e)}function validateArguments(e,t,r){if(e&&"string"==typeof e){if(t&&"string"==typeof t){if(!r||"function"!=typeof r)throw TypeError("third argument callback does not exist or is not of type function")}else throw TypeError("second argument menu does not exist or is not of type string")}else throw TypeError("first argument caller does not exist or is not of type string")}function push(e,t,r,n){l[r]??=[],l[r].push({type:e,caller:t,menu:r,callback:n,applied:!1})}function initialize(){let e=r.findByProps("openContextMenuLazy");n.default.instead("unbound-menu-patcher",e,"openContextMenuLazy",(e,r,i)=>{if(!r[1].__unbound){let u=r[1];r[1]=async(...e)=>{let r=await u(e[0]);return e=>(function handleMenu(e,r){let i=r(e);try{if(i.type.displayName?.endsWith("ContextMenu")){let u=i.type?.displayName,o=l[u];if(!o?.length)return i;for(let f of o)n.default[f.type](f.caller,i,"type",(e,t,r)=>{try{return f.callback.apply(e,[e,t,r])}catch(n){a.error(`Failed to run context menu patch on ${u} of caller ${f.caller}.`,n)}},!0);return i}let c=(0,t.forceRender)(i.type)(i.props);if(!c)return i;let p=c.props.children;if(p.type?.displayName?.endsWith("ContextMenu")){let d=p.type?.displayName,s=l[d];if(!s?.length)return i;for(let y of s)n.default[y.type](y.caller,p,"type",(e,t,r)=>{try{return y.callback.apply(e,[e,t,r])}catch(n){a.error(`Failed to run context menu patch on ${d} of caller ${y.caller}.`,n)}},!0);return p}let h=(0,t.forceRender)(p.type)(p.props);if("AnalyticsContext"===h.type.displayName){let g=h.props.children,m=g.type?.displayName,b=l[m];if(!b?.length)return i;for(let v of b)n.default[v.type](v.caller,g,"type",(e,t,r)=>{try{return v.callback.apply(e,[e,t,r])}catch(n){a.error(`Failed to run context menu patch on ${m} of caller ${v.caller}.`,n)}},!0);return g}}catch{}return i})(e,r)},r[1].__unbound=!0}return i.call(e,...r)})}window.__SPLASH__||setImmediate(()=>r.data.available.then(initialize));const i={instead,create,before,after,patches:l}
//# sourceMappingURL=data:application/json;base64,