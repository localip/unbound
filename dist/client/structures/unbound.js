"use strict";const e=require("path"),t=_interopRequireWildcard(require("../../common/utilities")),i=require("../../common/logger"),r=_interopRequireWildcard(require("../core/builtins")),n=_interopRequireWildcard(require("../core/patches")),s=_interopRequireWildcard(require("../core/updater")),a=_interopRequireWildcard(require("../managers/index")),o=_interopRequireWildcard(require("@webpack")),l=require("http"),u=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(require("../modules/patcher/index")),d=_interopRequireWildcard(require("@api"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,i=new WeakMap;return(_getRequireWildcardCache=function(e){return e?i:t})(e)}function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var i=_getRequireWildcardCache(t);if(i&&i.has(e))return i.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var a=n?Object.getOwnPropertyDescriptor(e,s):null;a&&(a.get||a.set)?Object.defineProperty(r,s,a):r[s]=e[s]}return r.default=e,i&&i.set(e,r),r}const h=(0,i.createLogger)();class Unbound{#sockets=new Set;utilities=t;patcher=u.default;webpack=o;updater=s;async initialize(){global.unbound=this,h.log("Initializing...");let e=performance.now();for(let t in await n.initialize(),await r.initialize(),this.apis={},d){let i=t.toLowerCase();this.apis[i]=d[t],await this.apis[i].initialize?.()}this.managers={plugins:new a.Plugins,themes:new a.Themes},this.managers.themes.initialize(),this.managers.plugins.initialize(),h.log(`Initialized in ${Math.round(performance.now()-e)}ms.`),this.#setupServer()}async shutdown(){for(let t of this.#sockets)t.destroy(),this.#sockets.delete(t);for(let i in this.server?.close?.(()=>h.debug("Server closed")),h.log("Shutting down..."),this.managers.plugins.shutdown(),this.managers.themes.shutdown(),d){let s=i.toLowerCase();this.apis[s]=d[i],await this.apis[s].shutdown?.()}await n.shutdown(),await r.shutdown(),await o.shutdown();let a=[...document.querySelectorAll('style[data-unbound="true"')];for(let l of a)l.remove();let u=(0,e.basename)((0,e.resolve)(__dirname,"..","..","..")),c=Object.keys(require.cache).filter(e=>~e.indexOf(u));for(let p=0,f=c.length;p<f;p++){let w=require.cache[c[p]];delete require.cache[c[p]];for(let g=0;g<w.parent.children.filter(Boolean).length;g++)if(w.parent.children[g]&&~w.parent.children[g].path.indexOf(u)){w.parent.children.splice(g,1);break}}delete global.unbound,global.unbound={async initialize(){let e=require("@webpack");await e.initialize();let t=require("@structures/unbound"),i=new t;await i.initialize()},restart:()=>global.unbound.initialize(),shutdown(){}}}async restart(){await this.shutdown(),await global.unbound?.initialize?.()}#setupServer(){this.server=(0,l.createServer)(this.#onRequest.bind(this)),this.server.on("connection",e=>{this.#sockets.add(e),this.server.once("close",()=>{this.#sockets.delete(e)})}),this.server.listen(9859,()=>h.debug("Server running at port 9859"))}#onRequest(c,p){p.statusCode=200;let f=c.method.toLowerCase(),w=c.url.split(/[?#]/),g=w[1],y=w[0];if(p.setHeader("Access-Control-Allow-Origin","*"),!y||"/"===y)return p.end();let q=(0,e.join)(__dirname,"..","routes",y);if(require.resolve(q))try{let v=require(q);if(!v[f])return p.statusCode=405,p.end();v[f](this,c,p,g)}catch(R){h.error(`Router failed to route request. (URL: ${y})`,R),p.statusCode=500,p.end()}else p.statusCode=404,p.end()}}module.exports=Unbound
//# sourceMappingURL=data:application/json;base64,