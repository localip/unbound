"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"default",{enumerable:!0,get:()=>j});const a=require("../../components/discord"),b=require("../../modules/webpack/common"),c=require("../../../common/utilities/index"),d=require("../../modules/webpack/api"),e=require("../../components/index"),f=i(require("react")),g=require("./Icons/index"),h=i(require("../../styles/panels/addoncard.css"));function i(a){return a&&a.__esModule?a:{default:a}}h.default.append();class j extends f.default.Component{componentWillMount(){let a=this.getGlobal(),b=this.getType(),c=window[a]?.[b]??window[a]?.managers?.[b];c?.on?.("toggle",this.onToggle)}componentWillUnmount(){let a=this.getGlobal(),b=this.getType(),c=window[a]?.[b]??window[a]?.managers?.[b];c?.off?.("toggle",this.onToggle)}render(){let{entity:d,client:g,resolve:h}=this.props,i=h(d,g,"author",{raw:!0}),j=h(d,g,"description"),k=h(d,g,"version"),l=h(d,g,"color"),m=h(d,g,"name");return f.default.createElement(a.Tooltip,{position:"left",text:d.failed?b.Locale.Messages[`UNBOUND_ADDON_FAILED_${this.props.type.toUpperCase()}`]:null,hideOnClick:!1},f.default.createElement("div",{className:(0,c.classnames)("unbound-addon-card",d.failed&&"disabled"),style:{"--entity-color":l},onContextMenu:c=>b.ContextMenu.openContextMenu(c,()=>f.default.createElement(a.Menu.default,{onClose:b.ContextMenu.closeContextMenu},f.default.createElement(a.Menu.MenuItem,{id:"delete",color:"colorDanger",label:b.Locale.Messages.UNBOUND_DELETE,action:()=>this.delete()}),f.default.createElement(a.Menu.MenuItem,{id:"reload",label:b.Locale.Messages.UNBOUND_RELOAD,action:()=>this.reload()})))},f.default.createElement("div",{className:"unbound-addon-header"},f.default.createElement(a.Text,{className:"unbound-addon-name",size:a.Text.Sizes.SIZE_16},m),f.default.createElement(a.Text,{className:"unbound-addon-version",size:a.Text.Sizes.SIZE_16,color:a.Text.Colors.INTERACTIVE_NORMAL},k),f.default.createElement(a.Text,{className:"unbound-addon-authors",size:a.Text.Sizes.SIZE_16,color:a.Text.Colors.INTERACTIVE_NORMAL},"by ",this.renderAuthors(i)),f.default.createElement("div",{className:"unbound-addon-controls"},"unbound"!==this.props.client&&f.default.createElement(a.RelativeTooltip,{text:b.Locale.Messages[`UNBOUND_ADDON_MANAGER_${this.props.client.toUpperCase()}_TOOLTIP`]?.format({type:"Plugin"}),hideOnClick:!1},a=>this.renderType({...a})),this.hasSettings()&&f.default.createElement(a.RelativeTooltip,{text:b.Locale.Messages.UNBOUND_SETTINGS,hideOnClick:!1},a=>f.default.createElement(e.Icon,Object.assign({},a,{onClick:()=>this.props.openSettings(),"data-is-disabled":!this.isEnabled,name:"Gear",width:28,height:28,className:"unbound-addon-control-button"}))),f.default.createElement(a.Switch,{checked:this.isEnabled,onChange:()=>this.toggle(),className:"unbound-addon-switch"}))),f.default.createElement("div",{className:"unbound-addon-footer"},f.default.createElement(a.FormText,{className:"unbound-addon-description"},f.default.createElement(a.Markdown,null,j)))))}renderAuthors(c){let e=[],g=c=>{if("string"==typeof c)e.push(c);else if("object"==typeof c&&c.name){let g=typeof c.id||typeof c.discord_id,h=g&&["number","string"].includes(typeof g);e.push(h?f.default.createElement(a.Anchor,{className:"unbound-addon-author",async onClick(){let a=c.id??c.discord_id;await d.Users?.getUser(a),b.Dispatcher.dirtyDispatch({type:b.Constants.ActionTypes.USER_PROFILE_MODAL_OPEN,userId:a})}},c.name):c.name)}};return Array.isArray(c)?c.map(g):"object"==typeof c&&c.name?g(c):"string"==typeof c&&e.push(c),e.map((a,b)=>{let c=b+1===e.length;return"string"==typeof a?c?a:`${a}, `:[a,c?"":", "]})}renderType(a){let{client:b}=this.props;switch(a.className??="unbound-addon-type-icon",a.width??=16,a.height??=16,b){case"bd":return f.default.createElement(g.Bd,Object.assign({},a));case"powercord":return f.default.createElement(g.Plug,Object.assign({},a));default:return null}}get isEnabled(){let a=this.getId(),b=this.getGlobal(),c=this.getType(),d=window[b]?.[c]??window[b]?.managers?.[c];return d?.isEnabled?.(a)}delete(){let a=this.getId(),b=this.getGlobal(),c=this.getType(),d=window[b]?.[c]??window[b]?.managers?.[c];return d?.delete?.(a)}toggle(){let a=this.getId(),b=this.getGlobal(),c=this.getType(),d=window[b]?.[c]??window[b]?.managers?.[c];return d?.toggle?.(a)}reload(){let a=this.getId(),b=this.getGlobal(),c=this.getType(),d=window[b]?.[c]??window[b]?.managers?.[c];return d?.reload?d.reload(a):d?.remount?d.remount(a):void 0}onToggle(a){let{entity:b}=this.props;[b.id,b.entityID,b.name].includes(a)&&this.forceUpdate()}getType(){let{type:a,client:b}=this.props;switch(b){case"powercord":return"plugins"===a?"pluginManager":"styleManager";case"bd":return"plugins"===a?"Plugins":"Themes";case"unbound":return"plugins"===a?"plugins":"themes"}}getGlobal(){let{client:a}=this.props;switch(a){case"powercord":return"powercord";case"bd":return"BdApi";case"unbound":return"unbound"}}hasSettings(){let{client:a,entity:b}=this.props,c=this.getId();switch(a){case"powercord":let d=powercord.api.settings.settings;if(d.has(c))return!0;let e=[...d.values()];return e.find(a=>{let b=[a.label,a.category];if(b.includes(c))return!0});case"unbound":case"bd":return b.instance?.getSettingsPanel}}getId(){let{client:a,entity:b}=this.props;switch(a){case"powercord":return b.entityID;case"bd":return b.name;case"unbound":return b.id}}}!function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g}([c.bind],j.prototype,"onToggle",null)
//# sourceMappingURL=data:application/json;base64,