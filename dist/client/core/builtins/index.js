"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(a,b){for(var c in b)Object.defineProperty(a,c,{enumerable:!0,get:b[c]})}(exports,{initialize:()=>j,shutdown:()=>k,start:()=>l,stop:()=>m});const a=require("../../../common/logger"),b=f(require("../../../common/settings")),c=f(require("./registry")),d=require("../../../common/utilities/index");function e(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(e=function(a){return a?c:b})(a)}function f(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=e(b);if(c&&c.has(a))return c.get(a);var d={},f=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var g in a)if("default"!==g&&Object.prototype.hasOwnProperty.call(a,g)){var h=f?Object.getOwnPropertyDescriptor(a,g):null;h&&(h.get||h.set)?Object.defineProperty(d,g,h):d[g]=a[g]}return d.default=a,c&&c.set(a,d),d}const g=(0,a.createLogger)("Built-In"),h=(0,d.debounce)(n,250),i={};async function j(){b.on("change",h);let a=Object.keys(c);for(let d=0;d<a.length;d++){let e=a[d];await l(e)}}async function k(){b.off("change",h);let a=Object.keys(c);for(let d=0;d<a.length;d++){let e=a[d];await m(e)}}async function l(a){let d=c[a];if(b.get("unbound",d.data.id,d.data.default)&& !i[d.data.id]&&d)try{d.data.wait?await d.initialize():d.initialize(),i[d.data.id]=!0,g.log(`${d.data.name} was initialized.`)}catch(e){g.error(`Failed to start ${d.data.name}.`,e.message)}}async function m(a){let b=c[a];if(i[b.data.id]&&b)try{b.data.wait?await b.shutdown():b.shutdown(),delete i[b.data.id],g.log(`${b.data.name} was stopped.`)}catch(d){g.error(`Failed to stop ${b.data.name}.`,d.message)}}async function n({key:a,value:b}){let d=Object.entries(c).find(([,b])=>b.data.id===a);d&&(b?await l(d[0]):await m(d[0]))}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvY29yZS9idWlsdGlucy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICdAY29tbW9uL2xvZ2dlcic7XHJcbmltcG9ydCAqIGFzIFNldHRpbmdzIGZyb20gJ0Bjb21tb24vc2V0dGluZ3MnO1xyXG5pbXBvcnQgKiBhcyBCdWlsdElucyBmcm9tICcuL3JlZ2lzdHJ5JztcclxuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tICdAdXRpbGl0aWVzJztcclxuXHJcbmNvbnN0IExvZ2dlciA9IGNyZWF0ZUxvZ2dlcignQnVpbHQtSW4nKTtcclxuXHJcbmNvbnN0IGhhbmRsZVNldHRpbmdzQ2hhbmdlID0gZGVib3VuY2Uob25TZXR0aW5nc0NoYW5nZSwgMjUwKTtcclxuXHJcbmludGVyZmFjZSBTZXR0aW5nc0NoYW5nZSB7XHJcbiAga2V5OiBzdHJpbmc7XHJcbiAgdmFsdWU6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNvbnN0IHN0YXJ0ZWQ6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge307XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuICBTZXR0aW5ncy5vbignY2hhbmdlJywgaGFuZGxlU2V0dGluZ3NDaGFuZ2UpO1xyXG5cclxuICBjb25zdCBidWlsdGlucyA9IE9iamVjdC5rZXlzKEJ1aWx0SW5zKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1aWx0aW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBuYW1lID0gYnVpbHRpbnNbaV07XHJcbiAgICBhd2FpdCBzdGFydChuYW1lKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaHV0ZG93bigpIHtcclxuICBTZXR0aW5ncy5vZmYoJ2NoYW5nZScsIGhhbmRsZVNldHRpbmdzQ2hhbmdlKTtcclxuXHJcbiAgY29uc3QgYnVpbHRpbnMgPSBPYmplY3Qua2V5cyhCdWlsdElucyk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWlsdGlucy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgbmFtZSA9IGJ1aWx0aW5zW2ldO1xyXG4gICAgYXdhaXQgc3RvcChuYW1lKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydChuYW1lOiBzdHJpbmcpIHtcclxuICBjb25zdCBpbnN0YW5jZSA9IEJ1aWx0SW5zW25hbWVdO1xyXG5cclxuICBpZiAoIVNldHRpbmdzLmdldCgndW5ib3VuZCcsIGluc3RhbmNlLmRhdGEuaWQsIGluc3RhbmNlLmRhdGEuZGVmYXVsdCkpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmIChzdGFydGVkW2luc3RhbmNlLmRhdGEuaWRdIHx8ICFpbnN0YW5jZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGlmIChpbnN0YW5jZS5kYXRhLndhaXQpIHtcclxuICAgICAgYXdhaXQgaW5zdGFuY2UuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaW5zdGFuY2UuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0ZWRbaW5zdGFuY2UuZGF0YS5pZF0gPSB0cnVlO1xyXG4gICAgTG9nZ2VyLmxvZyhgJHtpbnN0YW5jZS5kYXRhLm5hbWV9IHdhcyBpbml0aWFsaXplZC5gKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBMb2dnZXIuZXJyb3IoYEZhaWxlZCB0byBzdGFydCAke2luc3RhbmNlLmRhdGEubmFtZX0uYCwgZS5tZXNzYWdlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdG9wKG5hbWU6IHN0cmluZykge1xyXG4gIGNvbnN0IGluc3RhbmNlID0gQnVpbHRJbnNbbmFtZV07XHJcblxyXG4gIGlmICghc3RhcnRlZFtpbnN0YW5jZS5kYXRhLmlkXSB8fCAhaW5zdGFuY2UpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICBpZiAoaW5zdGFuY2UuZGF0YS53YWl0KSB7XHJcbiAgICAgIGF3YWl0IGluc3RhbmNlLnNodXRkb3duKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbnN0YW5jZS5zaHV0ZG93bigpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZSBzdGFydGVkW2luc3RhbmNlLmRhdGEuaWRdO1xyXG4gICAgTG9nZ2VyLmxvZyhgJHtpbnN0YW5jZS5kYXRhLm5hbWV9IHdhcyBzdG9wcGVkLmApO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIExvZ2dlci5lcnJvcihgRmFpbGVkIHRvIHN0b3AgJHtpbnN0YW5jZS5kYXRhLm5hbWV9LmAsIGUubWVzc2FnZSk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBvblNldHRpbmdzQ2hhbmdlKHsga2V5LCB2YWx1ZSB9OiBTZXR0aW5nc0NoYW5nZSkge1xyXG4gIGNvbnN0IHBheWxvYWQgPSBPYmplY3QuZW50cmllcyhCdWlsdElucykuZmluZCgoWywgdl0pID0+IHYuZGF0YS5pZCA9PT0ga2V5KTtcclxuICBpZiAoIXBheWxvYWQpIHJldHVybjtcclxuXHJcbiAgaWYgKCF2YWx1ZSkge1xyXG4gICAgYXdhaXQgc3RvcChwYXlsb2FkWzBdKTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXdhaXQgc3RhcnQocGF5bG9hZFswXSk7XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbImluaXRpYWxpemUiLCJzaHV0ZG93biIsInN0YXJ0Iiwic3RvcCIsIkxvZ2dlciIsImNyZWF0ZUxvZ2dlciIsImhhbmRsZVNldHRpbmdzQ2hhbmdlIiwiZGVib3VuY2UiLCJvblNldHRpbmdzQ2hhbmdlIiwic3RhcnRlZCIsIlNldHRpbmdzIiwib24iLCJidWlsdGlucyIsIk9iamVjdCIsImtleXMiLCJCdWlsdElucyIsImkiLCJsZW5ndGgiLCJuYW1lIiwib2ZmIiwiaW5zdGFuY2UiLCJnZXQiLCJkYXRhIiwiaWQiLCJkZWZhdWx0Iiwid2FpdCIsImxvZyIsImUiLCJlcnJvciIsIm1lc3NhZ2UiLCJrZXkiLCJ2YWx1ZSIsInBheWxvYWQiLCJlbnRyaWVzIiwiZmluZCIsInYiXSwibWFwcGluZ3MiOiJBQUFBLGdLQWdCc0JBLFVBQVUsS0FBVkEsQ0FBVSxDQVVWQyxRQUFRLEtBQVJBLENBQVEsQ0FVUkMsS0FBSyxLQUFMQSxDQUFLLENBeUJMQyxJQUFJLEtBQUpBLENBQUksbUJBN0RHLHdCQUFnQixjQUNuQiwwQkFBa0IsZUFDbEIsWUFBWSxhQUNiLGlDQUFZLCtqQkFFckMsTUFBTUMsQ0FBTSxDQUFHQyxHQUFBQSxDQUFZLGFBQUEsRUFBQyxVQUFVLENBQUMsQ0FFakNDLENBQW9CLENBQUdDLEdBQUFBLENBQVEsU0FBQSxFQUFDQyxDQUFnQixDQUFFLEdBQUcsQ0FBQyxDQU90REMsQ0FBTyxDQUE0QixFQUFFLEFBVEgsQUFXakMsZ0JBQWVULENBQVUsRUFBRyxDQUNqQ1UsQ0FBUSxDQUFDQyxFQUFFLENBQUMsUUFBUSxDQUFFTCxDQUFvQixDQUFDLEFBRTNDLEtBQU1NLENBQVEsQ0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLENBQVEsQ0FBQyxBQUFDLEFBQ3ZDLEtBQUssSUFBSUMsQ0FBQyxDQUFHLENBQUMsQ0FBRUEsQ0FBQyxDQUFHSixDQUFRLENBQUNLLE1BQU0sQ0FBRUQsQ0FBQyxFQUFFLENBQUUsQ0FDeEMsSUFBTUUsQ0FBSSxDQUFHTixDQUFRLENBQUNJLENBQUMsQ0FBQyxBQUFDLEFBQ3pCLE9BQU1kLENBQUssQ0FBQ2dCLENBQUksQ0FBQyxDQUNsQixDQUNGLEFBRU0sZUFBZWpCLENBQVEsRUFBRyxDQUMvQlMsQ0FBUSxDQUFDUyxHQUFHLENBQUMsUUFBUSxDQUFFYixDQUFvQixDQUFDLEFBRTVDLEtBQU1NLENBQVEsQ0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLENBQVEsQ0FBQyxBQUFDLEFBQ3ZDLEtBQUssSUFBSUMsQ0FBQyxDQUFHLENBQUMsQ0FBRUEsQ0FBQyxDQUFHSixDQUFRLENBQUNLLE1BQU0sQ0FBRUQsQ0FBQyxFQUFFLENBQUUsQ0FDeEMsSUFBTUUsQ0FBSSxDQUFHTixDQUFRLENBQUNJLENBQUMsQ0FBQyxBQUFDLEFBQ3pCLE9BQU1iLENBQUksQ0FBQ2UsQ0FBSSxDQUFDLENBQ2pCLENBQ0YsQUFFTSxlQUFlaEIsQ0FBSyxDQUFDZ0IsQ0FBWSxDQUFFLENBQ3hDLElBQU1FLENBQVEsQ0FBR0wsQ0FBUSxDQURDRyxDQUFZLENBQ1AsQUFBQyxBQUVoQyxJQUFLUixDQUFRLENBQUNXLEdBQUcsQ0FBQyxTQUFTLENBQUVELENBQVEsQ0FBQ0UsSUFBSSxDQUFDQyxFQUFFLENBQUVILENBQVEsQ0FBQ0UsSUFBSSxDQUFDRSxPQUFPLENBQUMsR0FJakVmLENBQUFBLENBQU8sQ0FBQ1csQ0FBUSxDQUFDRSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxFQUFLSCxDQUFRLENBSTFDLEdBQUksQ0FDRUEsQ0FBUSxDQUFDRSxJQUFJLENBQUNHLElBQUksQ0FDcEIsTUFBTUwsQ0FBUSxDQUFDcEIsVUFBVSxFQUFFLENBRTNCb0IsQ0FBUSxDQUFDcEIsVUFBVSxFQUFFLENBR3ZCUyxDQUFPLENBQUNXLENBQVEsQ0FBQ0UsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBRyxDQUFBLENBQUksQ0FDaENuQixDQUFNLENBQUNzQixHQUFHLENBQUMsQ0FBQyxFQUFFTixDQUFRLENBQUNFLElBQUksQ0FBQ0osSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FDckQsQUFBQyxNQUFPUyxDQUFDLENBQUUsQ0FDVnZCLENBQU0sQ0FBQ3dCLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFUixDQUFRLENBQUNFLElBQUksQ0FBQ0osSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFUyxDQUFDLENBQUNFLE9BQU8sQ0FBQyxDQUNsRSxBQWpCQSxDQWtCRixBQUVNLGVBQWUxQixDQUFJLENBQUNlLENBQVksQ0FBRSxDQUN2QyxJQUFNRSxDQUFRLENBQUdMLENBQVEsQ0FEQUcsQ0FBWSxDQUNOLEFBQUMsQUFFaEMsSUFBSSxBQUFDVCxDQUFPLENBQUNXLENBQVEsQ0FBQ0UsSUFBSSxDQUFDQyxFQUFFLENBQUMsRUFBS0gsQ0FBUSxDQUkzQyxHQUFJLENBQ0VBLENBQVEsQ0FBQ0UsSUFBSSxDQUFDRyxJQUFJLENBQ3BCLE1BQU1MLENBQVEsQ0FBQ25CLFFBQVEsRUFBRSxDQUV6Qm1CLENBQVEsQ0FBQ25CLFFBQVEsRUFBRSxDQUdyQixPQUFPUSxDQUFPLENBQUNXLENBQVEsQ0FBQ0UsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FDaENuQixDQUFNLENBQUNzQixHQUFHLENBQUMsQ0FBQyxFQUFFTixDQUFRLENBQUNFLElBQUksQ0FBQ0osSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQ2pELEFBQUMsTUFBT1MsQ0FBQyxDQUFFLENBQ1Z2QixDQUFNLENBQUN3QixLQUFLLENBQUMsQ0FBQyxlQUFlLEVBQUVSLENBQVEsQ0FBQ0UsSUFBSSxDQUFDSixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUVTLENBQUMsQ0FBQ0UsT0FBTyxDQUFDLENBQ2pFLEFBYkEsQ0FjRixBQUVELGVBQWVyQixDQUFnQixDQUFDLENBQUVzQixHQUFHLENBQUhBLENBQUcsQ0FBRUMsS0FBSyxDQUFMQSxDQUFLLENBQWtCLENBQUUsQ0FDOUQsSUFBTUMsQ0FBTyxDQUFHbkIsTUFBTSxDQUFDb0IsT0FBTyxDQUFDbEIsQ0FBUSxDQUFDLENBQUNtQixJQUFJLENBQUMsQ0FBQyxFQUFHQyxDQUFDLENBQUMsR0FBS0EsQ0FBQyxDQUFDYixJQUFJLENBQUNDLEVBQUUsR0FBS08sQ0FBRyxDQUFDLEFBQUMsQ0FDdkVFLENBQU8sR0FFUEQsQ0FBSyxDQUdSLE1BQU03QixDQUFLLENBQUM4QixDQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FGdkIsTUFBTTdCLENBQUksQ0FBQzZCLENBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUl6QiJ9