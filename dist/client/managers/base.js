"use strict";const a=require("../../common/logger"),b=j(require("../../common/settings")),c=require("path"),d=j(require("@entities")),e=require("../../common/constants"),f=h(require("events")),g=h(require("fs"));function h(a){return a&&a.__esModule?a:{default:a}}function i(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(i=function(a){return a?c:b})(a)}function j(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=i(b);if(c&&c.has(a))return c.get(a);var d={},e=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var f in a)if("default"!==f&&Object.prototype.hasOwnProperty.call(a,f)){var g=e?Object.getOwnPropertyDescriptor(a,f):null;g&&(g.get||g.set)?Object.defineProperty(d,f,g):d[f]=a[f]}return d.default=a,c&&c.set(a,d),d}class k extends f.default{entities=new Map;constructor({name:b,entity:f,folder:h}){if(super(),this.logger=(0,a.createLogger)("Managers",b),this.entity=d[f],this.name=b,this.started=new Set,!this.entity)throw Error("Invalid entity.");g.default.existsSync(e.Paths.storage)||g.default.mkdirSync(e.Paths.storage),this.id=h,this.folder=(0,c.resolve)(e.Paths.storage,h),g.default.existsSync(this.folder)||g.default.mkdirSync(this.folder)}start(a){let b=this.resolve(a);if(b||(b=this.load(a)),b?.instance&&!this.started.has(b.data?.id))try{this.started.add(b.data.id),b.instance.start?.(),this.logger.log(`${b.data.name} was started.`)}catch(c){this.started.delete(b.data.id),this.logger.error(`Couldn't start ${b.data.name}. You may face issues with your client.
`,c)}}stop(a){let b=this.resolve(a);if(b?.instance&&this.started.has(b.data?.id))try{this.started.delete(b.data.id),b.instance.stop?.(),this.logger.log(`${b.data.name} was stopped.`)}catch(c){this.started.add(b.data.id),this.logger.error(`Couldn't stop ${b.data.name}. You may face issues with your client.
`,c)}}reload(a){let b=this.resolve(a);try{if(!b)return this.load(a);this.unload(b.folder),this.load(b.folder)}catch(c){this.logger.error(`Couldn't reload ${a}`,c)}return b}resolve(a){if(a.instance)return a;let b=this.entities.get(a);if(b)return b;let c=[...this.entities.values()],d=c.find(b=>b.folder===a||b.id===a);if(d)return d}loadMissing(){let a=g.default.readdirSync(this.folder),b=a.filter(a=>{let b=(0,c.resolve)(this.folder,a);return g.default.statSync(b).isDirectory()&&!this.resolve(a)}),d=[];for(let e of b)try{let f=this.load(e);d.push(f)}catch(h){this.logger.error(h)}return{loaded:d,missing:b}}initialize(){let a={failed:0},b=g.default.readdirSync(this.folder),d=b.filter(a=>g.default.statSync((0,c.resolve)(this.folder,a)).isDirectory());for(let e of d)try{let f=this.load(e);f?.failed&&a.failed++}catch(h){a.failed++,this.logger.error(h)}}load(a){let b=(0,c.resolve)(this.folder,a);if(!g.default.existsSync(b))throw Error(`${a} doesn't exist in the ${this.name} folder.`);if(!g.default.lstatSync(b).isDirectory())throw Error(`${a} isn't an ASAR package.`);let d=(0,c.resolve)(b,"manifest.json");if(!g.default.existsSync(d))throw Error(`${a} is missing a manifest.`);let e=require(d);this.#a(e);let f=window.__SPLASH__;if(f&&!e.splash)return;if(this.entities.get(e.id))throw Error(`${a} is a taken ID, therefore it won't be loaded/overriden.`);let h={instance:null,failed:!1,started:null,data:null};this.#b(e,h,b);try{let i=this.resolvePayload(b,e,f);this.#b(e,i.prototype,b),h.instance=new i}catch(j){h.failed=!0,this.logger.error(`Failed to load addon ${a}, registering it with an empty instance.`,j)}h.instance&&this.#b(e,h.instance,b);try{h.instance?.load?.()}catch(k){this.logger.error(`Failed to run load() method in ${a}.`)}return this.entities.set(e.id,h),this.emit("load",e.id,h),this.emit("updated"),this.isEnabled(e.id)&&this.start(e.id),h}unload(a){let b=this.resolve(a);if(!b)throw Error("Invalid addon");this.stop(b);let c=Object.keys(require.cache).filter(a=>~a.indexOf(b.path));try{this.stop(b);for(let d=0,e=c.length;d<e;d++){let f=require.cache[c[d]];delete require.cache[c[d]];for(let g=0;g<f.parent.children.filter(Boolean).length;g++)if(f.parent.children[g]&& ~f.parent.children[g].path.indexOf(b.path)){f.parent.children.splice(g,1);break}}this.entities.delete(b.id),this.emit("updated")}catch(h){this.logger.error(`FATAL: ${b.id} was not able to unload properly, a reload using CTRL+R is recommended.`,h)}}shutdown(){for(let a of this.entities.values())try{this.unload(a)}catch(b){this.logger.error(`Failed to stop ${a.id}. Skipping.`,b.message);continue}}disable(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");let d=b.get("unbound","addon-states",{});return d[this.id]??={},d[this.id][c.id]=!1,c.started&&this.stop(c),b.set("unbound","addon-states",d)}enable(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");let d=b.get("unbound","addon-states",{});return d[this.id]??={},d[this.id][c.id]=!0,c.started||this.start(c),b.set("unbound","addon-states",d)}toggle(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");let d=b.get("unbound","addon-states",{});d[this.id]??={},d[this.id][c.id]=!d[this.id][c.id],d[this.id][c.id]?this.start(c):this.stop(c),b.set("unbound","addon-states",d),this.emit("toggle")}isEnabled(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");return b.get("unbound","addon-states",{})[this.id]?.[c.id]?? !1}resolvePayload(a,b,d=!1){let e=(0,c.resolve)(a,d?b.splash:b.main??""),f=require(e);return f.__esModule?f.default:f} #a(l){let m=["name","id","authors","version"].filter(a=>!l[a]);if(m?.length)throw Error(`${l.name} is missing the following manifest keys: ${m.join(", ")}`)} #b(n,o,p){o&&(["data","started","id","path","folder"].every(a=>void 0!==o[a])||Object.defineProperties(o,{data:{get:()=>n,set:()=>this.logger.error("Entity manifest changes are forbidden at runtime.")},started:{get:()=>this.started.has(n.id),set:()=>this.logger.error("Entity started state changes are forbidden at runtime.")},id:{get:()=>n.id,set:()=>this.logger.error("Entity ID changes are forbidden at runtime.")},path:{get:()=>p,set:()=>this.logger.error("Path changes are forbidden at runtime.")},folder:{get:()=>(0,c.basename)(p),set:()=>this.logger.error("Folder changes are forbidden at runtime.")}}))}}module.exports=k
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvbWFuYWdlcnMvYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICdAY29tbW9uL2xvZ2dlcic7XHJcbmltcG9ydCAqIGFzIFNldHRpbmdzIGZyb20gJ0Bjb21tb24vc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyByZXNvbHZlLCBiYXNlbmFtZSB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyBFbnRpdGllcyBmcm9tICdAZW50aXRpZXMnO1xyXG5pbXBvcnQgeyBQYXRocyB9IGZyb20gJ0Bjb25zdGFudHMnO1xyXG5pbXBvcnQgRW1pdHRlciBmcm9tICdldmVudHMnO1xyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5cclxuaW50ZXJmYWNlIE1hbmFnZXJPcHRpb25zIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZW50aXR5OiBzdHJpbmc7XHJcbiAgZm9sZGVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEF1dGhvciA9IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgaWQ/OiBudW1iZXI7XHJcbn0gfCBzdHJpbmc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1hbmlmZXN0IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIGF1dGhvcnM6IEF1dGhvciB8IEF1dGhvcltdO1xyXG4gIHZlcnNpb246IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5IHtcclxuICBzdGFydGVkOiBib29sZWFuO1xyXG4gIGZhaWxlZDogYm9vbGVhbjtcclxuICBkYXRhOiBNYW5pZmVzdDtcclxuICBmb2xkZXI6IHN0cmluZztcclxuICBpbnN0YW5jZTogYW55O1xyXG4gIHBhdGg6IHN0cmluZztcclxuICBpZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBSZXNvbHZlYWJsZSA9IHN0cmluZyB8IEVudGl0eTtcclxuXHJcbmNsYXNzIE1hbmFnZXIgZXh0ZW5kcyBFbWl0dGVyIHtcclxuICBwdWJsaWMgbG9nZ2VyOiBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVMb2dnZXI+O1xyXG4gIHB1YmxpYyBlbnRpdGllczogTWFwPHN0cmluZywgRW50aXR5PiA9IG5ldyBNYXAoKTtcclxuICBwdWJsaWMgc3RhcnRlZDogU2V0PHN0cmluZz47XHJcbiAgcHVibGljIGVudGl0eTogc3RyaW5nO1xyXG4gIHB1YmxpYyBmb2xkZXI6IHN0cmluZztcclxuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGVudGl0eSwgZm9sZGVyIH06IE1hbmFnZXJPcHRpb25zKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMubG9nZ2VyID0gY3JlYXRlTG9nZ2VyKCdNYW5hZ2VycycsIG5hbWUpO1xyXG4gICAgdGhpcy5lbnRpdHkgPSBFbnRpdGllc1tlbnRpdHldO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0ZWQgPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgaWYgKCF0aGlzLmVudGl0eSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW50aXR5LicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZnMuZXhpc3RzU3luYyhQYXRocy5zdG9yYWdlKSkge1xyXG4gICAgICBmcy5ta2RpclN5bmMoUGF0aHMuc3RvcmFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pZCA9IGZvbGRlcjtcclxuICAgIHRoaXMuZm9sZGVyID0gcmVzb2x2ZShQYXRocy5zdG9yYWdlLCBmb2xkZXIpO1xyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHRoaXMuZm9sZGVyKSkge1xyXG4gICAgICBmcy5ta2RpclN5bmModGhpcy5mb2xkZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnQoaWQ6IFJlc29sdmVhYmxlKSB7XHJcbiAgICBsZXQgZW50aXR5ID0gdGhpcy5yZXNvbHZlKGlkKTtcclxuICAgIGlmICghZW50aXR5KSB7XHJcbiAgICAgIGVudGl0eSA9IHRoaXMubG9hZChpZCBhcyBzdHJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbnRpdHk/Lmluc3RhbmNlICYmICF0aGlzLnN0YXJ0ZWQuaGFzKGVudGl0eS5kYXRhPy5pZCkpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0aGlzLnN0YXJ0ZWQuYWRkKGVudGl0eS5kYXRhLmlkKTtcclxuICAgICAgICBlbnRpdHkuaW5zdGFuY2Uuc3RhcnQ/LigpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhgJHtlbnRpdHkuZGF0YS5uYW1lfSB3YXMgc3RhcnRlZC5gKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRlZC5kZWxldGUoZW50aXR5LmRhdGEuaWQpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBDb3VsZG4ndCBzdGFydCAke2VudGl0eS5kYXRhLm5hbWV9LiBZb3UgbWF5IGZhY2UgaXNzdWVzIHdpdGggeW91ciBjbGllbnQuXFxuYCwgZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0b3AoaWQ6IFJlc29sdmVhYmxlKSB7XHJcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLnJlc29sdmUoaWQpO1xyXG4gICAgaWYgKGVudGl0eT8uaW5zdGFuY2UgJiYgdGhpcy5zdGFydGVkLmhhcyhlbnRpdHkuZGF0YT8uaWQpKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5zdGFydGVkLmRlbGV0ZShlbnRpdHkuZGF0YS5pZCk7XHJcbiAgICAgICAgZW50aXR5Lmluc3RhbmNlLnN0b3A/LigpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhgJHtlbnRpdHkuZGF0YS5uYW1lfSB3YXMgc3RvcHBlZC5gKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRlZC5hZGQoZW50aXR5LmRhdGEuaWQpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBDb3VsZG4ndCBzdG9wICR7ZW50aXR5LmRhdGEubmFtZX0uIFlvdSBtYXkgZmFjZSBpc3N1ZXMgd2l0aCB5b3VyIGNsaWVudC5cXG5gLCBlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVsb2FkKGlkOiBSZXNvbHZlYWJsZSk6IEVudGl0eSB7XHJcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLnJlc29sdmUoaWQpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghZW50aXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZChpZCBhcyBzdHJpbmcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVubG9hZChlbnRpdHkuZm9sZGVyKTtcclxuICAgICAgdGhpcy5sb2FkKGVudGl0eS5mb2xkZXIpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgQ291bGRuJ3QgcmVsb2FkICR7aWR9YCwgZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVudGl0eTtcclxuICB9XHJcblxyXG4gIHJlc29sdmUoaWQ6IGFueSk6IEVudGl0eSB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAoaWQuaW5zdGFuY2UpIHJldHVybiBpZDtcclxuXHJcbiAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5lbnRpdGllcy5nZXQoaWQpO1xyXG4gICAgaWYgKHN0b3JhZ2UpIHJldHVybiBzdG9yYWdlO1xyXG5cclxuICAgIGNvbnN0IGVudGl0aWVzID0gWy4uLnRoaXMuZW50aXRpZXMudmFsdWVzKCldO1xyXG4gICAgY29uc3Qgb3RoZXIgPSBlbnRpdGllcy5maW5kKGUgPT4gZS5mb2xkZXIgPT09IGlkIHx8IGUuaWQgPT09IGlkKTtcclxuICAgIGlmIChvdGhlcikgcmV0dXJuIG90aGVyO1xyXG4gIH1cclxuXHJcbiAgbG9hZE1pc3NpbmcoKSB7XHJcbiAgICBjb25zdCBjb250ZW50cyA9IGZzLnJlYWRkaXJTeW5jKHRoaXMuZm9sZGVyKTtcclxuICAgIGNvbnN0IGVudGl0aWVzID0gY29udGVudHMuZmlsdGVyKGlkID0+IHtcclxuICAgICAgY29uc3QgcGF0aCA9IHJlc29sdmUodGhpcy5mb2xkZXIsIGlkKTtcclxuICAgICAgcmV0dXJuIGZzLnN0YXRTeW5jKHBhdGgpLmlzRGlyZWN0b3J5KCkgJiYgIXRoaXMucmVzb2x2ZShpZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBsb2FkZWQgPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGlkIG9mIGVudGl0aWVzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5sb2FkKGlkKTtcclxuICAgICAgICBsb2FkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBsb2FkZWQsIG1pc3Npbmc6IGVudGl0aWVzIH07XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKCkge1xyXG4gICAgY29uc3Qgc3RhdHVzID0geyBmYWlsZWQ6IDAgfTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50cyA9IGZzLnJlYWRkaXJTeW5jKHRoaXMuZm9sZGVyKTtcclxuICAgIGNvbnN0IGVudGl0aWVzID0gY29udGVudHMuZmlsdGVyKGUgPT4gZnMuc3RhdFN5bmMocmVzb2x2ZSh0aGlzLmZvbGRlciwgZSkpLmlzRGlyZWN0b3J5KCkpO1xyXG5cclxuICAgIGZvciAoY29uc3QgaWQgb2YgZW50aXRpZXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmxvYWQoaWQpO1xyXG4gICAgICAgIGlmIChlbnRpdHk/LmZhaWxlZCkgc3RhdHVzLmZhaWxlZCsrO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgc3RhdHVzLmZhaWxlZCsrO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsb2FkKGlkOiBzdHJpbmcpOiBFbnRpdHkge1xyXG4gICAgY29uc3Qgcm9vdCA9IHJlc29sdmUodGhpcy5mb2xkZXIsIGlkKTtcclxuICAgIGlmICghZnMuZXhpc3RzU3luYyhyb290KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7aWR9IGRvZXNuJ3QgZXhpc3QgaW4gdGhlICR7dGhpcy5uYW1lfSBmb2xkZXIuYCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFmcy5sc3RhdFN5bmMocm9vdCkuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7aWR9IGlzbid0IGFuIEFTQVIgcGFja2FnZS5gKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbWFuaWZlc3QgPSByZXNvbHZlKHJvb3QsICdtYW5pZmVzdC5qc29uJyk7XHJcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMobWFuaWZlc3QpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpZH0gaXMgbWlzc2luZyBhIG1hbmlmZXN0LmApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSByZXF1aXJlKG1hbmlmZXN0KTtcclxuICAgIHRoaXMuI3ZhbGlkYXRlTWFuaWZlc3QoZGF0YSk7XHJcblxyXG4gICAgY29uc3QgaXNTcGxhc2ggPSB3aW5kb3cuX19TUExBU0hfXztcclxuICAgIGlmIChpc1NwbGFzaCAmJiAhZGF0YS5zcGxhc2gpIHJldHVybjtcclxuXHJcbiAgICBpZiAodGhpcy5lbnRpdGllcy5nZXQoZGF0YS5pZCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2lkfSBpcyBhIHRha2VuIElELCB0aGVyZWZvcmUgaXQgd29uJ3QgYmUgbG9hZGVkL292ZXJyaWRlbi5gKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXMgPSB7XHJcbiAgICAgIGluc3RhbmNlOiBudWxsLFxyXG4gICAgICBmYWlsZWQ6IGZhbHNlLFxyXG4gICAgICBzdGFydGVkOiBudWxsLFxyXG4gICAgICBkYXRhOiBudWxsXHJcbiAgICB9IGFzIEVudGl0eTtcclxuXHJcbiAgICB0aGlzLiNhc3NpZ25EYXRhKGRhdGEsIHJlcywgcm9vdCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgQ29uc3RydWN0b3IgPSB0aGlzLnJlc29sdmVQYXlsb2FkKHJvb3QsIGRhdGEsIGlzU3BsYXNoKTtcclxuICAgICAgdGhpcy4jYXNzaWduRGF0YShkYXRhLCBDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHJvb3QpO1xyXG4gICAgICByZXMuaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmVzLmZhaWxlZCA9IHRydWU7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gbG9hZCBhZGRvbiAke2lkfSwgcmVnaXN0ZXJpbmcgaXQgd2l0aCBhbiBlbXB0eSBpbnN0YW5jZS5gLCBlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzLmluc3RhbmNlKSB7XHJcbiAgICAgIHRoaXMuI2Fzc2lnbkRhdGEoZGF0YSwgcmVzLmluc3RhbmNlLCByb290KTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICByZXMuaW5zdGFuY2U/LmxvYWQ/LigpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIHJ1biBsb2FkKCkgbWV0aG9kIGluICR7aWR9LmApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZW50aXRpZXMuc2V0KGRhdGEuaWQsIHJlcyk7XHJcbiAgICB0aGlzLmVtaXQoJ2xvYWQnLCBkYXRhLmlkLCByZXMpO1xyXG4gICAgdGhpcy5lbWl0KCd1cGRhdGVkJyk7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNFbmFibGVkKGRhdGEuaWQpKSB7XHJcbiAgICAgIHRoaXMuc3RhcnQoZGF0YS5pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHVubG9hZChpZDogUmVzb2x2ZWFibGUpIHtcclxuICAgIGNvbnN0IGFkZG9uOiBFbnRpdHkgPSB0aGlzLnJlc29sdmUoaWQpO1xyXG4gICAgaWYgKCFhZGRvbikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFkZG9uJyk7XHJcblxyXG4gICAgdGhpcy5zdG9wKGFkZG9uKTtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSkuZmlsdGVyKGMgPT4gfmMuaW5kZXhPZihhZGRvbi5wYXRoKSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5zdG9wKGFkZG9uKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYWNoZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IG1vZCA9IHJlcXVpcmUuY2FjaGVbY2FjaGVbaV1dO1xyXG4gICAgICAgIGRlbGV0ZSByZXF1aXJlLmNhY2hlW2NhY2hlW2ldXTtcclxuXHJcbiAgICAgICAgLy8gRGVsZXRlIHBhcmVudCBjaGlsZHJlbiB0byBhdm9pZCBtZW1vcnkgbGVha3NcclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IG1vZC5wYXJlbnQuY2hpbGRyZW4uZmlsdGVyKEJvb2xlYW4pLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICBpZiAoIW1vZC5wYXJlbnQuY2hpbGRyZW5ba10pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgaWYgKH5tb2QucGFyZW50LmNoaWxkcmVuW2tdLnBhdGguaW5kZXhPZihhZGRvbi5wYXRoKSkge1xyXG4gICAgICAgICAgICBtb2QucGFyZW50LmNoaWxkcmVuLnNwbGljZShrLCAxKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmVudGl0aWVzLmRlbGV0ZShhZGRvbi5pZCk7XHJcbiAgICAgIHRoaXMuZW1pdCgndXBkYXRlZCcpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRkFUQUw6ICR7YWRkb24uaWR9IHdhcyBub3QgYWJsZSB0byB1bmxvYWQgcHJvcGVybHksIGEgcmVsb2FkIHVzaW5nIENUUkwrUiBpcyByZWNvbW1lbmRlZC5gLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNodXRkb3duKCkge1xyXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgdGhpcy5lbnRpdGllcy52YWx1ZXMoKSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMudW5sb2FkKGVudGl0eSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIHN0b3AgJHtlbnRpdHkuaWR9LiBTa2lwcGluZy5gLCBlLm1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNhYmxlKGlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFkZG9uID0gdGhpcy5yZXNvbHZlKGlkKTtcclxuICAgIGlmICghYWRkb24pIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZGRvbi4nKTtcclxuXHJcbiAgICBjb25zdCBhZGRvbnMgPSBTZXR0aW5ncy5nZXQoJ3VuYm91bmQnLCAnYWRkb24tc3RhdGVzJywge30pO1xyXG4gICAgYWRkb25zW3RoaXMuaWRdID8/PSB7fTtcclxuICAgIGFkZG9uc1t0aGlzLmlkXVthZGRvbi5pZF0gPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoYWRkb24uc3RhcnRlZCkge1xyXG4gICAgICB0aGlzLnN0b3AoYWRkb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBTZXR0aW5ncy5zZXQoJ3VuYm91bmQnLCAnYWRkb24tc3RhdGVzJywgYWRkb25zKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZShpZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBhZGRvbiA9IHRoaXMucmVzb2x2ZShpZCk7XHJcbiAgICBpZiAoIWFkZG9uKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkb24uJyk7XHJcblxyXG4gICAgY29uc3QgYWRkb25zID0gU2V0dGluZ3MuZ2V0KCd1bmJvdW5kJywgJ2FkZG9uLXN0YXRlcycsIHt9KTtcclxuICAgIGFkZG9uc1t0aGlzLmlkXSA/Pz0ge307XHJcbiAgICBhZGRvbnNbdGhpcy5pZF1bYWRkb24uaWRdID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAoIWFkZG9uLnN0YXJ0ZWQpIHtcclxuICAgICAgdGhpcy5zdGFydChhZGRvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFNldHRpbmdzLnNldCgndW5ib3VuZCcsICdhZGRvbi1zdGF0ZXMnLCBhZGRvbnMpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlKGlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFkZG9uID0gdGhpcy5yZXNvbHZlKGlkKTtcclxuICAgIGlmICghYWRkb24pIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZGRvbi4nKTtcclxuXHJcbiAgICBjb25zdCBhZGRvbnMgPSBTZXR0aW5ncy5nZXQoJ3VuYm91bmQnLCAnYWRkb24tc3RhdGVzJywge30pO1xyXG4gICAgYWRkb25zW3RoaXMuaWRdID8/PSB7fTtcclxuICAgIGFkZG9uc1t0aGlzLmlkXVthZGRvbi5pZF0gPSAhKGFkZG9uc1t0aGlzLmlkXVthZGRvbi5pZF0gPz8gZmFsc2UpO1xyXG5cclxuICAgIGlmIChhZGRvbnNbdGhpcy5pZF1bYWRkb24uaWRdKSB7XHJcbiAgICAgIHRoaXMuc3RhcnQoYWRkb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdG9wKGFkZG9uKTtcclxuICAgIH1cclxuXHJcbiAgICBTZXR0aW5ncy5zZXQoJ3VuYm91bmQnLCAnYWRkb24tc3RhdGVzJywgYWRkb25zKTtcclxuICAgIHRoaXMuZW1pdCgndG9nZ2xlJyk7XHJcbiAgfVxyXG5cclxuICBpc0VuYWJsZWQoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgYWRkb24gPSB0aGlzLnJlc29sdmUoaWQpO1xyXG4gICAgaWYgKCFhZGRvbikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFkZG9uLicpO1xyXG5cclxuICAgIHJldHVybiBTZXR0aW5ncy5nZXQoJ3VuYm91bmQnLCAnYWRkb24tc3RhdGVzJywge30pW3RoaXMuaWRdPy5bYWRkb24uaWRdID8/IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcmVzb2x2ZVBheWxvYWQocm9vdDogc3RyaW5nLCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBpc1NwbGFzaDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBwYXRoID0gcmVzb2x2ZShyb290LCBpc1NwbGFzaCA/IGRhdGEuc3BsYXNoIDogZGF0YS5tYWluID8/ICcnKTtcclxuICAgIGNvbnN0IHBheWxvYWQgPSByZXF1aXJlKHBhdGgpO1xyXG5cclxuICAgIHJldHVybiBwYXlsb2FkLl9fZXNNb2R1bGUgPyBwYXlsb2FkLmRlZmF1bHQgOiBwYXlsb2FkO1xyXG4gIH1cclxuXHJcbiAgI3ZhbGlkYXRlTWFuaWZlc3QoZGF0YTogUmVjb3JkPHN0cmluZywgYW55Pik6IHZvaWQgfCBFcnJvciB7XHJcbiAgICBjb25zdCBrZXlzID0gWyduYW1lJywgJ2lkJywgJ2F1dGhvcnMnLCAndmVyc2lvbiddO1xyXG4gICAgY29uc3QgbWlzc2luZyA9IGtleXMuZmlsdGVyKGsgPT4gIWRhdGFba10pO1xyXG5cclxuICAgIGlmIChtaXNzaW5nPy5sZW5ndGgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2RhdGEubmFtZX0gaXMgbWlzc2luZyB0aGUgZm9sbG93aW5nIG1hbmlmZXN0IGtleXM6ICR7bWlzc2luZy5qb2luKCcsICcpfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgI2Fzc2lnbkRhdGEoZGF0YSwgb2JqZWN0LCBwYXRoKSB7XHJcbiAgICBpZiAoIW9iamVjdCkgcmV0dXJuO1xyXG4gICAgaWYgKFsnZGF0YScsICdzdGFydGVkJywgJ2lkJywgJ3BhdGgnLCAnZm9sZGVyJ10uZXZlcnkocCA9PiBvYmplY3RbcF0gIT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwge1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgZ2V0OiAoKSA9PiBkYXRhLFxyXG4gICAgICAgIHNldDogKCkgPT4gdGhpcy5sb2dnZXIuZXJyb3IoJ0VudGl0eSBtYW5pZmVzdCBjaGFuZ2VzIGFyZSBmb3JiaWRkZW4gYXQgcnVudGltZS4nKVxyXG4gICAgICB9LFxyXG4gICAgICBzdGFydGVkOiB7XHJcbiAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLnN0YXJ0ZWQuaGFzKGRhdGEuaWQpLFxyXG4gICAgICAgIHNldDogKCkgPT4gdGhpcy5sb2dnZXIuZXJyb3IoJ0VudGl0eSBzdGFydGVkIHN0YXRlIGNoYW5nZXMgYXJlIGZvcmJpZGRlbiBhdCBydW50aW1lLicpXHJcbiAgICAgIH0sXHJcbiAgICAgIGlkOiB7XHJcbiAgICAgICAgZ2V0OiAoKSA9PiBkYXRhLmlkLFxyXG4gICAgICAgIHNldDogKCkgPT4gdGhpcy5sb2dnZXIuZXJyb3IoJ0VudGl0eSBJRCBjaGFuZ2VzIGFyZSBmb3JiaWRkZW4gYXQgcnVudGltZS4nKVxyXG4gICAgICB9LFxyXG4gICAgICBwYXRoOiB7XHJcbiAgICAgICAgZ2V0OiAoKSA9PiBwYXRoLFxyXG4gICAgICAgIHNldDogKCkgPT4gdGhpcy5sb2dnZXIuZXJyb3IoJ1BhdGggY2hhbmdlcyBhcmUgZm9yYmlkZGVuIGF0IHJ1bnRpbWUuJylcclxuICAgICAgfSxcclxuICAgICAgZm9sZGVyOiB7XHJcbiAgICAgICAgZ2V0OiAoKSA9PiBiYXNlbmFtZShwYXRoKSxcclxuICAgICAgICBzZXQ6ICgpID0+IHRoaXMubG9nZ2VyLmVycm9yKCdGb2xkZXIgY2hhbmdlcyBhcmUgZm9yYmlkZGVuIGF0IHJ1bnRpbWUuJylcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5leHBvcnQgPSBNYW5hZ2VyOyJdLCJuYW1lcyI6WyJNYW5hZ2VyIiwiRW1pdHRlciIsImVudGl0aWVzIiwiTWFwIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZW50aXR5IiwiZm9sZGVyIiwibG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiRW50aXRpZXMiLCJzdGFydGVkIiwiU2V0IiwiRXJyb3IiLCJmcyIsImV4aXN0c1N5bmMiLCJQYXRocyIsInN0b3JhZ2UiLCJta2RpclN5bmMiLCJpZCIsInJlc29sdmUiLCJzdGFydCIsImxvYWQiLCJpbnN0YW5jZSIsImhhcyIsImRhdGEiLCJhZGQiLCJsb2ciLCJlIiwiZGVsZXRlIiwiZXJyb3IiLCJzdG9wIiwicmVsb2FkIiwidW5sb2FkIiwiZ2V0IiwidmFsdWVzIiwib3RoZXIiLCJmaW5kIiwibG9hZE1pc3NpbmciLCJjb250ZW50cyIsInJlYWRkaXJTeW5jIiwiZmlsdGVyIiwicGF0aCIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJsb2FkZWQiLCJwdXNoIiwibWlzc2luZyIsImluaXRpYWxpemUiLCJzdGF0dXMiLCJmYWlsZWQiLCJyb290IiwibHN0YXRTeW5jIiwibWFuaWZlc3QiLCJyZXF1aXJlIiwidmFsaWRhdGVNYW5pZmVzdCIsImlzU3BsYXNoIiwid2luZG93IiwiX19TUExBU0hfXyIsInNwbGFzaCIsInJlcyIsImFzc2lnbkRhdGEiLCJDb25zdHJ1Y3RvciIsInJlc29sdmVQYXlsb2FkIiwicHJvdG90eXBlIiwic2V0IiwiZW1pdCIsImlzRW5hYmxlZCIsImFkZG9uIiwiY2FjaGUiLCJPYmplY3QiLCJrZXlzIiwiYyIsImluZGV4T2YiLCJpIiwibGVuIiwibGVuZ3RoIiwibW9kIiwiayIsInBhcmVudCIsImNoaWxkcmVuIiwiQm9vbGVhbiIsInNwbGljZSIsInNodXRkb3duIiwibWVzc2FnZSIsImRpc2FibGUiLCJhZGRvbnMiLCJTZXR0aW5ncyIsImVuYWJsZSIsInRvZ2dsZSIsIm1haW4iLCJwYXlsb2FkIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJqb2luIiwib2JqZWN0IiwiZXZlcnkiLCJwIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydGllcyIsImJhc2VuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkIscUJBQWdCLGNBQ25CLHVCQUFrQixhQUNWLE1BQU0sY0FDZCxXQUFXLGFBQ2Ysd0JBQVksY0FDZCxRQUFRLGVBQ2IsSUFBSSxtbkJBaUNuQixNQUFNQSxDQUFPLFNBQVNDLENBQU8sUUFBQSxDQUUzQixBQUFPQyxRQUFRLENBQXdCLElBQUlDLEdBQUcsQUFBRSxBQUFDLEFBT2pEQyxhQUFZLENBQUVDLElBQUksQ0FBSkEsQ0FBSSxDQUFFQyxNQUFNLENBQU5BLENBQU0sQ0FBRUMsTUFBTSxDQUFOQSxDQUFNLENBQWtCLENBQUUsQ0FTcEQsR0FSQSxLQUFLLEVBQUUsQ0FFUCxJQUFJLENBQUNDLE1BQU0sQ0FBR0MsR0FBQUEsQ0FBWSxhQUFBLEVBQUMsVUFBVSxDQUFFSixDQUFJLENBQUMsQ0FDNUMsSUFBSSxDQUFDQyxNQUFNLENBQUdJLENBQVEsQ0FBQ0osQ0FBTSxDQUFDLENBQzlCLElBQUksQ0FBQ0QsSUFBSSxDQUFHQSxDQUFJLENBRWhCLElBQUksQ0FBQ00sT0FBTyxDQUFHLElBQUlDLEdBQUcsQUFBRSxDQUVwQixDQUFDLElBQUksQ0FBQ04sTUFBTSxDQUNkLE1BQU0sQUFBSU8sS0FBSyxDQUFDLGlCQUFpQixDQUFDLEFBQUMsQUFDcEMsQUFFSUMsQ0FBQUEsQ0FBRSxRQUFBLENBQUNDLFVBQVUsQ0FBQ0MsQ0FB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