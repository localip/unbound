"use strict";const t=require("../../common/logger"),e=_interopRequireWildcard(require("../../common/settings")),i=require("path"),r=_interopRequireWildcard(require("@entities")),s=require("../../common/constants"),a=_interopRequireDefault(require("events")),l=_interopRequireDefault(require("fs"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _getRequireWildcardCache(t){if("function"!=typeof WeakMap)return null;var e=new WeakMap,i=new WeakMap;return(_getRequireWildcardCache=function(t){return t?i:e})(t)}function _interopRequireWildcard(t,e){if(!e&&t&&t.__esModule)return t;if(null===t||"object"!=typeof t&&"function"!=typeof t)return{default:t};var i=_getRequireWildcardCache(e);if(i&&i.has(t))return i.get(t);var r={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if("default"!==a&&Object.prototype.hasOwnProperty.call(t,a)){var l=s?Object.getOwnPropertyDescriptor(t,a):null;l&&(l.get||l.set)?Object.defineProperty(r,a,l):r[a]=t[a]}return r.default=t,i&&i.set(t,r),r}class Manager extends a.default{entities=new Map;constructor({name:e,entity:a,folder:o}){if(super(),this.logger=(0,t.createLogger)("Managers",e),this.entity=r[a],this.name=e,this.started=new Set,!this.entity)throw Error("Invalid entity.");l.default.existsSync(s.Paths.storage)||l.default.mkdirSync(s.Paths.storage),this.id=o,this.folder=(0,i.resolve)(s.Paths.storage,o),l.default.existsSync(this.folder)||l.default.mkdirSync(this.folder)}start(t){let e=this.resolve(t);if(e||(e=this.load(t)),e?.instance&&!this.started.has(e.data?.id))try{this.started.add(e.data.id),e.instance.start?.(),this.logger.log(`${e.data.name} was started.`)}catch(i){this.started.delete(e.data.id),this.logger.error(`Couldn't start ${e.data.name}. You may face issues with your client.
`,i)}}stop(t){let e=this.resolve(t);if(e?.instance&&this.started.has(e.data?.id))try{this.started.delete(e.data.id),e.instance._stop?.(),this.logger.log(`${e.data.name} was stopped.`)}catch(i){this.started.add(e.data.id),this.logger.error(`Couldn't stop ${e.data.name}. You may face issues with your client.
`,i)}}delete(t){let e=this.resolve(t);if(!e)throw Error("Invalid entity.");try{l.default.unlinkSync(e.path),this.unload(e.id)}catch(i){throw this.logger.error(`Failed to delete ${e.id}`,i),i}}reload(t){let e=this.resolve(t);try{if(!e)return this.load(t);this.unload(e.folder),this.load(e.folder)}catch(i){this.logger.error(`Couldn't reload ${t}`,i)}return e}resolve(t){if(t.instance)return t;let e=this.entities.get(t);if(e)return e;let i=[...this.entities.values()],r=i.find(e=>e.folder===t||e.id===t);if(r)return r}loadMissing(){let t=l.default.readdirSync(this.folder),e=t.filter(t=>{let e=(0,i.resolve)(this.folder,t);return l.default.statSync(e).isDirectory()&&!this.resolve(t)}),r=[];for(let s of e)try{let a=this.load(s);r.push(a)}catch(o){this.logger.error(o)}return{loaded:r,missing:e}}initialize(){let t={failed:0},e=l.default.readdirSync(this.folder),r=e.filter(t=>{try{let e=(0,i.resolve)(this.folder,t);return l.default.statSync(e).isDirectory()}catch{return!1}});for(let s of r)try{let a=this.load(s);a?.failed&&t.failed++}catch(o){t.failed++,this.logger.error(o)}}load(t){if(this.resolve(t))return;let e=(0,i.resolve)(this.folder,t);if(!l.default.existsSync(e))throw Error(`${t} doesn't exist in the ${this.name} folder.`);if(!l.default.lstatSync(e).isDirectory())throw Error(`${t} isn't an ASAR package.`);let r=(0,i.resolve)(e,"manifest.json");if(!l.default.existsSync(r))throw Error(`${t} is missing a manifest.`);let s=require(r);this.#validateManifest(s);let a=window.__SPLASH__;if(a&&!s.splash)return;if(this.entities.get(s.id))throw Error(`${t} is a taken ID, therefore it won't be loaded/overriden.`);let o={instance:null,failed:!1,started:null,data:null};this.#assignData(s,o,e);try{let d=this.resolvePayload(e,s,a);this.#assignData(s,d.prototype,e),o.instance=new d}catch(n){this.logger.error(`Failed to load addon ${t}, registering it with an empty instance.`,n),o.failed=!0}o.instance&&this.#assignData(s,o.instance,e);try{o.instance?.load?.()}catch(h){this.logger.error(`Failed to run load() method in ${t}.`)}return this.entities.set(s.id,o),this.emit("load",s.id,o),this.emit("updated"),this.isEnabled(s.id)&&this.start(s.id),o}unload(t){let e=this.resolve(t);if(!e)throw Error("Invalid addon");try{let i=Object.keys(require.cache).filter(t=>~t.indexOf(e.path));this.stop(e);for(let r=0,s=i.length;r<s;r++){let a=require.cache[i[r]];delete require.cache[i[r]];for(let l=0;l<a.parent.children.filter(Boolean).length;l++)if(a.parent.children[l]&&~a.parent.children[l].path.indexOf(e.path)){a.parent.children.splice(l,1);break}}this.entities.delete(e.id),this.emit("updated")}catch(o){this.logger.error(`FATAL: ${e.id} was not able to unload properly, a reload using CTRL+R is recommended.`,o)}}shutdown(){for(let t of this.entities.values())try{this.unload(t)}catch(e){this.logger.error(`Failed to stop ${t.id}. Skipping.`,e.message);continue}}disable(t){let i=this.resolve(t);if(!i)throw Error("Invalid addon.");let r=e.get("unbound","addon-states",{});return r[this.id]??={},r[this.id][i.id]=!1,i.started&&this.stop(i),e.set("unbound","addon-states",r)}enable(t){let i=this.resolve(t);if(!i)throw Error("Invalid addon.");let r=e.get("unbound","addon-states",{});return r[this.id]??={},r[this.id][i.id]=!0,i.started||this.start(i.folder),e.set("unbound","addon-states",r)}toggle(t){let i=this.resolve(t);if(!i)throw Error("Invalid addon.");let r=e.get("unbound","addon-states",{});r[this.id]??={},r[this.id][i.id]=!r[this.id][i.id],r[this.id][i.id]?this.start(i):this.stop(i),e.set("unbound","addon-states",r),this.emit("toggle")}isEnabled(t){let i=this.resolve(t);if(!i)throw Error("Invalid addon.");return e.get("unbound","addon-states",{})[this.id]?.[i.id]??!1}resolvePayload(t,e,r=!1){let s=(0,i.resolve)(t,r?e.splash:e.main??""),a=require(s);return a.__esModule?a.default:a}#validateManifest(o){let d=["name","id","authors","version"].filter(t=>!o[t]);if(d?.length)throw Error(`${o.name} is missing the following manifest keys: ${d.join(", ")}`)}#assignData(n,h,f){h&&(["data","started","id","path","folder"].every(t=>void 0!==h[t])||Object.defineProperties(h,{data:{get:()=>n,set:()=>this.logger.error("Entity manifest changes are forbidden at runtime.")},started:{get:()=>this.started.has(n.id),set:()=>this.logger.error("Entity started state changes are forbidden at runtime.")},id:{get:()=>n.id,set:()=>this.logger.error("Entity ID changes are forbidden at runtime.")},path:{get:()=>f,set:()=>this.logger.error("Path changes are forbidden at runtime.")},folder:{get:()=>(0,i.basename)(f),set:()=>this.logger.error("Folder changes are forbidden at runtime.")}}))}}module.exports=Manager
//# sourceMappingURL=data:application/json;base64,