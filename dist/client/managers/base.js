"use strict";const a=require("../../common/logger"),b=j(require("../../common/settings")),c=require("path"),d=j(require("@entities")),e=require("../../common/constants"),f=h(require("events")),g=h(require("fs"));function h(a){return a&&a.__esModule?a:{default:a}}function i(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(i=function(a){return a?c:b})(a)}function j(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=i(b);if(c&&c.has(a))return c.get(a);var d={},e=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var f in a)if("default"!==f&&Object.prototype.hasOwnProperty.call(a,f)){var g=e?Object.getOwnPropertyDescriptor(a,f):null;g&&(g.get||g.set)?Object.defineProperty(d,f,g):d[f]=a[f]}return d.default=a,c&&c.set(a,d),d}class k extends f.default{entities=new Map;constructor({name:b,entity:f,folder:h}){if(super(),this.logger=(0,a.createLogger)("Managers",b),this.entity=d[f],this.name=b,this.started=new Set,!this.entity)throw Error("Invalid entity.");g.default.existsSync(e.Paths.storage)||g.default.mkdirSync(e.Paths.storage),this.folder=(0,c.resolve)(e.Paths.storage,h),g.default.existsSync(this.folder)||g.default.mkdirSync(this.folder)}start(a){let b=this.resolve(a);if(b||(b=this.load(a)),b?.instance&&!this.started.has(b.data?.id))try{this.started.add(b.data.id),b.instance.start?.(),this.logger.log(`${b.data.name} was started.`)}catch(c){this.started.delete(b.data.id),this.logger.error(`Couldn't start ${b.data.name}. You may face issues with your client.
`,c)}}stop(a){let b=this.resolve(a);if(b?.instance&&this.started.has(b.data?.id))try{this.started.delete(b.data.id),b.instance.stop?.(),this.logger.log(`${b.data.name} was stopped.`)}catch(c){this.started.add(b.data.id),this.logger.error(`Couldn't stop ${b.data.name}. You may face issues with your client.
`,c)}}reload(a){let b=this.resolve(a);try{if(!b)return this.load(a);this.unload(b.folder),this.load(b.folder)}catch(c){this.logger.error(`Couldn't reload ${a}`,c)}return b}resolve(a){if(a.instance)return a;let b=this.entities.get(a);if(b)return b;let c=[...this.entities.values()],d=c.find(b=>b.folder===a||b.id===a);if(d)return d}loadMissing(){let a=g.default.readdirSync(this.folder),b=a.filter(a=>{let b=(0,c.resolve)(this.folder,a);return g.default.statSync(b).isDirectory()&&!this.resolve(a)}),d=[];for(let e of b)try{let f=this.load(e);d.push(f)}catch(h){this.logger.error(h)}return{loaded:d,missing:b}}initialize(){let a={failed:0},b=g.default.readdirSync(this.folder),d=b.filter(a=>g.default.statSync((0,c.resolve)(this.folder,a)).isDirectory());for(let e of d)try{let f=this.load(e);f?.failed&&a.failed++}catch(h){a.failed++,this.logger.error(h)}}load(a){let b=(0,c.resolve)(this.folder,a);if(!g.default.existsSync(b))throw Error(`${a} doesn't exist in the ${this.name} folder.`);if(!g.default.lstatSync(b).isDirectory())throw Error(`${a} isn't an ASAR package.`);let d=(0,c.resolve)(b,"manifest.json");if(!g.default.existsSync(d))throw Error(`${a} is missing a manifest.`);let e=require(d);this.#a(e);let f=window.__SPLASH__;if(f&&!e.splash)return;if(this.entities.get(e.id))throw Error(`${a} is a taken ID, therefore it won't be loaded/overriden.`);let h={instance:null,failed:!1,started:null,data:null};this.#b(e,h,b);try{let i=this.resolvePayload(b,e,f);this.#b(e,i.prototype,b),h.instance=new i}catch(j){h.failed=!0,this.logger.error(`Failed to load addon ${a}, registering it with an empty instance.`,j)}h.instance&&this.#b(e,h.instance,b);try{h.instance?.load?.()}catch(k){this.logger.error(`Failed to run load() method in ${a}.`)}return this.entities.set(e.id,h),this.emit("load",e.id,h),this.emit("updated"),this.isEnabled(e.id)&&this.start(e.id),h}unload(a){let b=this.resolve(a);if(!b)throw Error("Invalid addon");this.stop(b);let c=Object.keys(require.cache).filter(a=>~a.indexOf(b.path));try{this.stop(b);for(let d=0,e=c.length;d<e;d++){let f=require.cache[c[d]];delete require.cache[c[d]];for(let g=0;g<f.parent.children.filter(Boolean).length;g++)if(f.parent.children[g]&& ~f.parent.children[g].path.indexOf(b.path)){f.parent.children.splice(g,1);break}}this.entities.delete(b.id),this.emit("updated")}catch(h){this.logger.error(`FATAL: ${b.id} was not able to unload properly, a reload using CTRL+R is recommended.`,h)}}shutdown(){for(let a of this.entities.values())try{this.unload(a)}catch(b){this.logger.error(`Failed to stop ${a.id}. Skipping.`,b.message);continue}}disable(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");let d=b.get("unbound","addon-states",{});return d[this.folder]??={},d[this.folder][c.id]=!1,c.started&&this.stop(c),b.set("unbound","addon-states",d)}enable(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");let d=b.get("unbound","addon-states",{});return d[this.folder]??={},d[this.folder][c.id]=!0,c.started||this.start(c),b.set("unbound","addon-states",d)}toggle(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");let d=b.get("unbound","addon-states",{});d[this.folder]??={},d[this.folder][c.id]=!d[this.folder][c.id],d[this.folder][c.id]?this.start(c):this.stop(c),b.set("unbound","addon-states",d),this.emit("toggle")}isEnabled(a){let c=this.resolve(a);if(!c)throw Error("Invalid addon.");return b.get("unbound","addon-states",{})[this.folder]?.[c.id]?? !1}resolvePayload(a,b,d=!1){let e=(0,c.resolve)(a,d?b.splash:b.main??""),f=require(e);return f.__esModule?f.default:f} #a(l){let m=["name","id","authors","version"].filter(a=>!l[a]);if(m?.length)throw Error(`${l.name} is missing the following manifest keys: ${m.join(", ")}`)} #b(n,o,p){o&&(["data","started","id","path","folder"].every(a=>void 0!==o[a])||Object.defineProperties(o,{data:{get:()=>n,set:()=>this.logger.error("Entity manifest changes are forbidden at runtime.")},started:{get:()=>this.started.has(n.id),set:()=>this.logger.error("Entity started state changes are forbidden at runtime.")},id:{get:()=>n.id,set:()=>this.logger.error("Entity ID changes are forbidden at runtime.")},path:{get:()=>p,set:()=>this.logger.error("Path changes are forbidden at runtime.")},folder:{get:()=>(0,c.basename)(p),set:()=>this.logger.error("Folder changes are forbidden at runtime.")}}))}}module.exports=k
//# sourceMappingURL=data:application/json;base64,