"use strict";const a=require("../../../common/logger"),b=g(require("../../../client/api/settings")),c=require("path"),d=g(require("../../../client/managers/index")),e=g(require("@webpack"));function f(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(f=function(a){return a?c:b})(a)}function g(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=f(b);if(c&&c.has(a))return c.get(a);var d={},e=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var g in a)if("default"!==g&&Object.prototype.hasOwnProperty.call(a,g)){var h=e?Object.getOwnPropertyDescriptor(a,g):null;h&&(h.get||h.set)?Object.defineProperty(d,g,h):d[g]=a[g]}return d.default=a,c&&c.set(a,d),d}const h=(0,a.createLogger)();module.exports=class a{webpack=e;async initialize(){global.unbound=this,h.log("Initializing...");let a=performance.now();for(let c in this.apis={settings:b},this.apis){let e=this.apis[c];await e.initialize()}this.managers={plugins:new d.Plugins},this.managers.plugins.initialize(),h.log(`Initialized in ${Math.round(performance.now()-a)}ms.`)}async shutdown(){h.log("Shutting down..."),this.managers.plugins.shutdown(),await e.shutdown();let a=(0,c.basename)((0,c.resolve)(__dirname,"..","..","..")),b=Object.keys(require.cache).filter(b=>~b.indexOf(a));b.map(a=>delete require.cache[a]),delete global.unbound,global.unbound={async initialize(){let a=require("@webpack");await a.initialize();let b=require("./unbound"),c=new b;await c.initialize()},restart:()=>global.unbound.initialize(),shutdown(){}}}async restart(){await this.shutdown(),await global.unbound?.initialize?.()}}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcmVsb2FkL3NwbGFzaC9zdHJ1Y3R1cmVzL3VuYm91bmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogTW9yZSBsaW1pdGVkIHZlcnNpb24gb2YgdGhlIG9yaWdpbmFsIHVuYm91bmQgZ2xvYmFsLlxyXG4gKiBJdCdzIGR1cGxpY2F0ZSBjb2RlLCBidXQgbG9hZGluZyB0aGUgb3JpZ2luYWwgd2lsbFxyXG4gKiBjYXVzZSBpdCB0byBub3QgbG9hZCBhcyB0aGVyZSdzIEFQSXMgd2hpY2ggcmVseSBvblxyXG4gKiB3ZWJwYWNrIG1vZHVsZXMgdGhhdCBhcmVuJ3QgaW4gdGhlIHNwbGFzaCBzY3JlZW4uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnQGNvbW1vbi9sb2dnZXInO1xyXG5pbXBvcnQgKiBhcyBTZXR0aW5ncyBmcm9tICdAYXBpL3NldHRpbmdzJztcclxuaW1wb3J0IHsgYmFzZW5hbWUsIHJlc29sdmUgfSBmcm9tICdwYXRoJztcclxuaW1wb3J0ICogYXMgTWFuYWdlcnMgZnJvbSAnQG1hbmFnZXJzJztcclxuaW1wb3J0ICogYXMgV2VicGFjayBmcm9tICdAd2VicGFjayc7XHJcblxyXG5jb25zdCBMb2dnZXIgPSBjcmVhdGVMb2dnZXIoKTtcclxuXHJcbmNsYXNzIFVuYm91bmQge1xyXG4gIGFwaXM6IFJlY29yZDxzdHJpbmcsIGFueT47XHJcbiAgd2VicGFjayA9IFdlYnBhY2s7XHJcbiAgbWFuYWdlcnM6IHtcclxuICAgIHBsdWdpbnM6IE1hbmFnZXJzLlBsdWdpbnM7XHJcbiAgfTtcclxuXHJcbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIChnbG9iYWwudW5ib3VuZCBhcyBhbnkpID0gdGhpcztcclxuXHJcbiAgICBMb2dnZXIubG9nKCdJbml0aWFsaXppbmcuLi4nKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG4gICAgdGhpcy5hcGlzID0ge1xyXG4gICAgICBzZXR0aW5nczogU2V0dGluZ3NcclxuICAgIH07XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBBUElzXHJcbiAgICBmb3IgKGNvbnN0IGFwaSBpbiB0aGlzLmFwaXMpIHtcclxuICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmFwaXNbYXBpXTtcclxuICAgICAgYXdhaXQgaW5zdGFuY2UuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubWFuYWdlcnMgPSB7XHJcbiAgICAgIHBsdWdpbnM6IG5ldyBNYW5hZ2Vycy5QbHVnaW5zKClcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5tYW5hZ2Vycy5wbHVnaW5zLmluaXRpYWxpemUoKTtcclxuXHJcbiAgICBMb2dnZXIubG9nKGBJbml0aWFsaXplZCBpbiAke01hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCl9bXMuYCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIExvZ2dlci5sb2coJ1NodXR0aW5nIGRvd24uLi4nKTtcclxuXHJcbiAgICB0aGlzLm1hbmFnZXJzLnBsdWdpbnMuc2h1dGRvd24oKTtcclxuXHJcbiAgICBhd2FpdCBXZWJwYWNrLnNodXRkb3duKCk7XHJcblxyXG4gICAgLy8gQ2xlYXIgcmVxdWlyZSBjYWNoZSB0byBhbGxvdyBmb3IgYW55IGNvZGUgY2hhbmdlcyB0byBhcHBseVxyXG4gICAgY29uc3QgcGFyZW50ID0gYmFzZW5hbWUocmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuLicpKTtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSkuZmlsdGVyKGMgPT4gfmMuaW5kZXhPZihwYXJlbnQpKTtcclxuICAgIGNhY2hlLm1hcChjID0+IGRlbGV0ZSByZXF1aXJlLmNhY2hlW2NdKTtcclxuXHJcbiAgICBkZWxldGUgZ2xvYmFsLnVuYm91bmQ7XHJcbiAgICAoZ2xvYmFsLnVuYm91bmQgYXMgYW55KSA9IHtcclxuICAgICAgaW5pdGlhbGl6ZTogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IFdlYnBhY2sgPSByZXF1aXJlKCdAd2VicGFjaycpO1xyXG4gICAgICAgIGF3YWl0IFdlYnBhY2suaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBDbGllbnQgPSByZXF1aXJlKCcuL3VuYm91bmQnKTtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBDbGllbnQoKTtcclxuICAgICAgICBhd2FpdCBpbnN0YW5jZS5pbml0aWFsaXplKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc3RhcnQ6ICgpID0+IGdsb2JhbC51bmJvdW5kLmluaXRpYWxpemUoKSxcclxuICAgICAgc2h1dGRvd246ICgpID0+IHsgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHJlc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLnNodXRkb3duKCk7XHJcbiAgICBhd2FpdCBnbG9iYWwudW5ib3VuZD8uaW5pdGlhbGl6ZT8uKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0ID0gVW5ib3VuZDsiXSwibmFtZXMiOlsiTG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiVW5ib3VuZCIsIndlYnBhY2siLCJXZWJwYWNrIiwiaW5pdGlhbGl6ZSIsImdsb2JhbCIsInVuYm91bmQiLCJsb2ciLCJzdGFydCIsInBlcmZvcm1hbmNlIiwibm93IiwiYXBpIiwiYXBpcyIsInNldHRpbmdzIiwiU2V0dGluZ3MiLCJpbnN0YW5jZSIsIm1hbmFnZXJzIiwicGx1Z2lucyIsIk1hbmFnZXJzIiwiUGx1Z2lucyIsIk1hdGgiLCJyb3VuZCIsInNodXRkb3duIiwicGFyZW50IiwiYmFzZW5hbWUiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiY2FjaGUiLCJPYmplY3QiLCJrZXlzIiwicmVxdWlyZSIsImZpbHRl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